initSidebarItems({"constant":[["POST_DROP_U32",""],["POST_DROP_U64",""],["POST_DROP_U8",""],["POST_DROP_USIZE",""]],"fn":[["align_of","Returns the alignment in memory for a type."],["align_of_val","Returns the ABI-required minimum alignment of the type of the value that `val` points to"],["drop","Disposes of a value."],["dropped","Creates a value initialized to an unspecified series of bytes."],["forget","Leaks a value into the void, consuming ownership and never running its destructor."],["min_align_of","Returns the ABI-required minimum alignment of a type"],["min_align_of_val","Returns the ABI-required minimum alignment of the type of the value that `val` points to"],["replace","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing or copying either one."],["size_of","Returns the size of a type in bytes."],["size_of_val","Returns the size of the given value in bytes."],["swap","Swap the values at two mutable locations of the same type, without deinitializing or copying either one."],["transmute","Unsafely transforms a value of one type into a value of another type."],["transmute_copy","Interprets `src` as `&U`, and then reads `src` without moving the contained value."],["uninitialized","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type T, while doing nothing at all."],["zeroed","Creates a value initialized to zero."]]});