var searchIndex = {};
searchIndex['leaf'] = {"items":[[0,"layer","leaf","Provides the generics and interfaces for the specific Layers.",null,null],[3,"Layer","leaf::layer","The generic Layer",null,null],[12,"name","","Identifies the Network",0,null],[12,"config","","The configuration of the Layer",0,null],[12,"worker","","The [implementation][1] of the Layer.\n[1]: ../layers/index.html",0,null],[12,"weights_data","","The vector that stores shared references to the weights in the form of blobs.",0,null],[12,"weights_gradient","","The vector that stores shared references to the weights in the form of blobs.",0,null],[12,"input_blobs_data","","References to all the input blobs of the layer.",0,null],[12,"input_blobs_gradient","","References to all the input blobs of the layer.",0,null],[12,"input_blob_names","","Names for all the input blobs of the layer.",0,null],[12,"output_blobs_data","","References to all the output blobs of the layer.",0,null],[12,"output_blobs_gradient","","References to all the output blobs of the layer.",0,null],[12,"blob_names","","All the blobs of the layer that can be addressed by name.",0,null],[3,"LayerConfig","","Layer Configuration Struct",null,null],[12,"name","","The name of the Layer",1,null],[12,"layer_type","","The type of the Layer",1,null],[12,"outputs","","The name for each output Blob",1,null],[12,"inputs","","The name for each input Blob",1,null],[12,"params","","Specifies training configuration for each weight blob.",1,null],[12,"propagate_down","","Specifies on which inputs the backpropagation should be skipped.\nThe size must be either 0 or equal to the number of inputs.",1,null],[4,"LayerType","","The Layer Types",null,null],[13,"Convolution","","Convolution Layer",2,null],[13,"Linear","","Linear Layer",2,null],[13,"LogSoftmax","","LogSoftmax Layer",2,null],[13,"Pooling","","Pooling Layer",2,null],[13,"Sequential","","Sequential Layer",2,null],[13,"Softmax","","Softmax Layer",2,null],[13,"ReLU","","ReLU Layer",2,null],[13,"Sigmoid","","Sigmoid Layer",2,null],[13,"NegativeLogLikelihood","","NegativeLogLikelihood Layer",2,null],[13,"Reshape","","Reshape Layer",2,null],[8,"ILayer","","A Layer in a Neural Network that can handle forward and backward of a computation step.",null,null],[11,"init","","Initialize the layer for computation.",3,{"inputs":[{"name":"ilayer"},{"name":"rc"}],"output":null}],[11,"reshape","","Adjust to shapes of the output blobs to fit the shapes of the input blobs.",3,{"inputs":[{"name":"ilayer"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"resize_shared_workspace","","Adjust size of shared workspace.",3,{"inputs":[{"name":"ilayer"},{"name":"rc"},{"name":"option"}],"output":{"name":"option"}}],[11,"forward","","Compute the [feedforward][1] layer output using the provided Backend.\n[1]: https://en.wikipedia.org/wiki/Feedforward_neural_network",3,null],[11,"backward_input","","Compute the [backpropagation][1] input gradient using the provided backend.\n[1]: https://en.wikipedia.org/wiki/Backpropagation",3,null],[11,"backward_parameters","","Compute the [backpropagation][1] parameters gradient using the provided backend.\n[1]: https://en.wikipedia.org/wiki/Backpropagation",3,null],[11,"sync","","Synchronize the blobs before doing a forward or backward operation.",3,null],[11,"auto_output_blobs","","Return whether \"anonymous\" output blobs are created automatically for the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"bool"}}],[11,"min_output_blobs","","Returns the minimum number of output blobs required by the layer,\nor 0 if no minimum number is required.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"usize"}}],[11,"exact_num_output_blobs","","Returns the exact number of output blobs required by the layer,\nor `None` if no exact number is required.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"auto_weight_blobs","","Return whether weight blobs are created automatically for the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"bool"}}],[11,"exact_num_input_blobs","","Returns the exact number of input blobs required by the layer,\nor `None` if no exact number is required.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"allow_force_backward","","Return whether to allow force_backward for a given input blob index.",3,{"inputs":[{"name":"ilayer"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"sync_native","","Return wether a simple native backend should be used to [sync][1] instead of the default backend.\n[1]: #method.sync",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"bool"}}],[11,"compute_in_place","","Return wether the computations of a layer should be done in-place (the output will be written where the input was read from).",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"bool"}}],[11,"is_container","","Return wether the layer is a container.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"bool"}}],[11,"loss_weight","","Return the associated loss weight for a given output blob index.",3,{"inputs":[{"name":"ilayer"},{"name":"usize"}],"output":{"name":"option"}}],[11,"inputs_data","","Return the input tensors of the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"inputs_gradients","","Return the gradients of the input tensors of the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"outputs_data","","Return the output tensors of the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"outputs_gradients","","Return the gradients of the output tensors of the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"learnable_weights","","Return the learnable weights inside the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"learnable_weights_gradients","","Return the gradients for the learnable weights inside the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"learnable_weights_lr","","Return the learning rates for the learnable weights inside the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[8,"ComputeOutput","","A Layer that can compute the output for a given input.",null,null],[10,"compute_output","","Compute output for given input and write them into `output_data`.",4,null],[8,"ComputeInputGradient","","A Layer that can compute the gradient with respect to its input.",null,null],[10,"compute_input_gradient","","Compute gradients with respect to the inputs and write them into `input_gradients`.",5,null],[8,"ComputeParametersGradient","","A Layer that can compute the gradient with respect to its parameters (= weights, bias, etc.).",null,null],[11,"compute_parameters_gradient","","Compute gradients with respect to the parameters and write them into `parameters_gradients`.",6,null],[11,"fmt","","",0,{"inputs":[{"name":"layer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Connect the layer to another layers and set up tensors for intermediate results and weights.",0,{"inputs":[{"name":"layer"},{"name":"hashmap"},{"name":"hashmap"}],"output":null}],[11,"init_backprop","","Initializes layer for [backpropagation][1]\n[1]: https://en.wikipedia.org/wiki/Backpropagation",0,{"inputs":[{"name":"layer"},{"name":"hashset"},{"name":"hashset"}],"output":null}],[11,"init_force_backward","","Set [backpropagation][1] flags to force this layer to backpropagate.\n[1]: https://en.wikipedia.org/wiki/Backpropagation",0,{"inputs":[{"name":"layer"}],"output":null}],[11,"forward","","Uses the underlying layer implementation to compute a forward step.",0,null],[11,"backward","","Uses the underlying layer implementation to compute a backward step.",0,null],[11,"backward_input","","Calculate the gradient w.r.t. input.",0,null],[11,"backward_parameters","","Calculate the gradient w.r.t. parameters.",0,{"inputs":[{"name":"layer"}],"output":null}],[11,"synchronize","","Synchronize the layers backend.",0,{"inputs":[{"name":"layer"}],"output":null}],[11,"update_weights","","Updates the [weights][1] with the weight update computed by the [Solver][2].\n[1]: https://en.wikipedia.org/wiki/Synaptic_weight\n[2]: ../solver/struct.Solver.html",0,{"inputs":[{"name":"layer"},{"name":"solverb"}],"output":null}],[11,"clear_weights_gradients","","Clears the [weights][1] gradients and zero-inits them.\n[1]: https://en.wikipedia.org/wiki/Synaptic_weight",0,{"inputs":[{"name":"layer"}],"output":null}],[11,"set_weight_propagate_down","","Sets whether the layer should compute gradients w.r.t. a\nweight at a particular index given by `weight_id`.",0,{"inputs":[{"name":"layer"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"is_using_in_place","","Returns `true` when the layer is using in-place computation.",0,{"inputs":[{"name":"layer"}],"output":{"name":"bool"}}],[11,"input_blob_names","","Returns the names of all the input blobs.",0,null],[11,"loss","","Returns the [loss weight][1] associated with the weight blob\nwith id `weight_id`.\n[1]: http://caffe.berkeleyvision.org/tutorial/loss.html",0,{"inputs":[{"name":"layer"},{"name":"usize"}],"output":{"name":"option"}}],[11,"learnable_weights_data","","Returns all the learnable weights in the layer.",0,{"inputs":[{"name":"layer"}],"output":{"name":"vec"}}],[11,"learnable_weights_gradients","","Returns the gradients for all the learnable weights in the layer.",0,{"inputs":[{"name":"layer"}],"output":{"name":"vec"}}],[11,"learnable_weights_lr","","Returns the learning rate for all the learnable weights in the layer.",0,{"inputs":[{"name":"layer"}],"output":{"name":"vec"}}],[11,"from_config","","Creates a new Layer from a [LayerConfig][1].\n[1]: ./struct.LayerConfig.html",0,{"inputs":[{"name":"layer"},{"name":"rc"},{"name":"layerconfig"}],"output":{"name":"layer"}}],[11,"fmt","leaf","",3,{"inputs":[{"name":"ilayer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","leaf::layer","",1,{"inputs":[{"name":"layerconfig"}],"output":{"name":"layerconfig"}}],[11,"fmt","","",1,{"inputs":[{"name":"layerconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"layertype"}],"output":{"name":"layertype"}}],[11,"fmt","","",2,{"inputs":[{"name":"layertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"supports_in_place","","Returns wether the LayerType supports in-place operations.",2,{"inputs":[{"name":"layertype"}],"output":{"name":"bool"}}],[11,"new","","Creates a new LayerConfig",1,{"inputs":[{"name":"layerconfig"},{"name":"str"},{"name":"l"}],"output":{"name":"layerconfig"}}],[11,"output","","Returns the Name of the requested output Blob",1,{"inputs":[{"name":"layerconfig"},{"name":"usize"}],"output":{"name":"option"}}],[11,"outputs_len","","Returns the number of output Blobs",1,{"inputs":[{"name":"layerconfig"}],"output":{"name":"usize"}}],[11,"add_output","","Add a output by name",1,{"inputs":[{"name":"layerconfig"},{"name":"str"}],"output":null}],[11,"input","","Returns the Name of the requested input Blob",1,{"inputs":[{"name":"layerconfig"},{"name":"usize"}],"output":{"name":"option"}}],[11,"inputs_len","","Returns the number of input Blobs",1,{"inputs":[{"name":"layerconfig"}],"output":{"name":"usize"}}],[11,"add_input","","Add a input by name",1,{"inputs":[{"name":"layerconfig"},{"name":"str"}],"output":null}],[11,"param","","Returns the requested WeightConfig",1,{"inputs":[{"name":"layerconfig"},{"name":"usize"}],"output":{"name":"option"}}],[11,"params_len","","Returns the number of params",1,{"inputs":[{"name":"layerconfig"}],"output":{"name":"usize"}}],[11,"validate","","Check if the configured parameters make sense.",1,{"inputs":[{"name":"layerconfig"}],"output":{"name":"result"}}],[0,"layers","leaf","Provides the fundamental units of computation in a Neural Network.",null,null],[0,"activation","leaf::layers","Provides nonlinear activation methods.",null,null],[0,"relu","leaf::layers::activation","Applies the nonlinear Rectified Linear Unit.",null,null],[3,"ReLU","leaf::layers::activation::relu","ReLU Activation Layer",null,null],[11,"clone","","",7,{"inputs":[{"name":"relu"}],"output":{"name":"relu"}}],[11,"fmt","","",7,{"inputs":[{"name":"relu"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"exact_num_output_blobs","","",7,{"inputs":[{"name":"relu"}],"output":{"name":"option"}}],[11,"exact_num_input_blobs","","",7,{"inputs":[{"name":"relu"}],"output":{"name":"option"}}],[11,"compute_in_place","","",7,{"inputs":[{"name":"relu"}],"output":{"name":"bool"}}],[11,"reshape","","",7,{"inputs":[{"name":"relu"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",7,null],[11,"compute_input_gradient","","",7,null],[0,"sigmoid","leaf::layers::activation","Applies the nonlinear Log-Sigmoid function.",null,null],[3,"Sigmoid","leaf::layers::activation::sigmoid","Sigmoid Activation Layer",null,null],[11,"clone","","",8,{"inputs":[{"name":"sigmoid"}],"output":{"name":"sigmoid"}}],[11,"fmt","","",8,{"inputs":[{"name":"sigmoid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"exact_num_output_blobs","","",8,{"inputs":[{"name":"sigmoid"}],"output":{"name":"option"}}],[11,"exact_num_input_blobs","","",8,{"inputs":[{"name":"sigmoid"}],"output":{"name":"option"}}],[11,"compute_in_place","","",8,{"inputs":[{"name":"sigmoid"}],"output":{"name":"bool"}}],[11,"reshape","","",8,{"inputs":[{"name":"sigmoid"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",8,null],[11,"compute_input_gradient","","",8,null],[0,"common","leaf::layers","Provides common neural network layers.",null,null],[0,"convolution","leaf::layers::common","Convolves the input tensor.",null,null],[3,"Convolution","leaf::layers::common::convolution","Convolution Layer",null,null],[3,"ConvolutionConfig","","Specifies configuration parameters for a Convolution Layer.",null,null],[12,"num_output","","The number of output feature maps",9,null],[12,"filter_shape","","The size of the kernel",9,null],[12,"stride","","The stride size",9,null],[12,"padding","","The padding size",9,null],[11,"clone","","",10,{"inputs":[{"name":"convolution"}],"output":{"name":"convolution"}}],[11,"fmt","","",10,{"inputs":[{"name":"convolution"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_config","","Create a Convolution layer from a ConvolutionConfig.",10,{"inputs":[{"name":"convolution"},{"name":"convolutionconfig"}],"output":{"name":"convolution"}}],[11,"num_spatial_dims","","Calculates the number of spatial dimensions for the convolution operation.",10,null],[11,"calculate_output_shape","","",10,null],[11,"filter_shape","","",10,null],[11,"stride","","",10,null],[11,"padding","","",10,null],[11,"exact_num_output_blobs","","",10,{"inputs":[{"name":"convolution"}],"output":{"name":"option"}}],[11,"exact_num_input_blobs","","",10,{"inputs":[{"name":"convolution"}],"output":{"name":"option"}}],[11,"auto_weight_blobs","","",10,{"inputs":[{"name":"convolution"}],"output":{"name":"bool"}}],[11,"reshape","","",10,{"inputs":[{"name":"convolution"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"resize_shared_workspace","","",10,{"inputs":[{"name":"convolution"},{"name":"rc"},{"name":"option"}],"output":{"name":"option"}}],[11,"compute_output","","",10,null],[11,"compute_input_gradient","","",10,null],[11,"compute_parameters_gradient","","",10,null],[11,"clone","","",9,{"inputs":[{"name":"convolutionconfig"}],"output":{"name":"convolutionconfig"}}],[11,"fmt","","",9,{"inputs":[{"name":"convolutionconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",9,{"inputs":[{"name":"convolutionconfig"}],"output":{"name":"layertype"}}],[0,"linear","leaf::layers::common","Applies a linear transformation to the input data `y = a * x + b`",null,null],[3,"Linear","leaf::layers::common::linear","Linear Layer",null,null],[3,"LinearConfig","","Specifies configuration parameters for a Linear Layer.",null,null],[12,"output_size","","The number of output values",11,null],[11,"fmt","","",12,{"inputs":[{"name":"linear"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_config","","Create a Linear layer from a LinearConfig.",12,{"inputs":[{"name":"linear"},{"name":"linearconfig"}],"output":{"name":"linear"}}],[11,"exact_num_output_blobs","","",12,{"inputs":[{"name":"linear"}],"output":{"name":"option"}}],[11,"exact_num_input_blobs","","",12,{"inputs":[{"name":"linear"}],"output":{"name":"option"}}],[11,"auto_weight_blobs","","",12,{"inputs":[{"name":"linear"}],"output":{"name":"bool"}}],[11,"init","","",12,{"inputs":[{"name":"linear"},{"name":"rc"}],"output":null}],[11,"reshape","","",12,{"inputs":[{"name":"linear"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",12,null],[11,"compute_input_gradient","","",12,null],[11,"compute_parameters_gradient","","",12,null],[11,"default","","",12,{"inputs":[{"name":"linear"}],"output":{"name":"linear"}}],[11,"clone","","",11,{"inputs":[{"name":"linearconfig"}],"output":{"name":"linearconfig"}}],[11,"fmt","","",11,{"inputs":[{"name":"linearconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",11,{"inputs":[{"name":"linearconfig"}],"output":{"name":"layertype"}}],[0,"log_softmax","leaf::layers::common","Computes the logarithmic softmax of its input.",null,null],[3,"LogSoftmax","leaf::layers::common::log_softmax","LogSoftmax Layer",null,null],[11,"clone","","",13,{"inputs":[{"name":"logsoftmax"}],"output":{"name":"logsoftmax"}}],[11,"fmt","","",13,{"inputs":[{"name":"logsoftmax"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reshape","","",13,{"inputs":[{"name":"logsoftmax"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",13,null],[11,"compute_input_gradient","","",13,null],[11,"default","","",13,{"inputs":[{"name":"logsoftmax"}],"output":{"name":"logsoftmax"}}],[0,"pooling","leaf::layers::common","Applies pooling to the input.",null,null],[3,"Pooling","leaf::layers::common::pooling","[Pooling](./index.html) Layer",null,null],[3,"PoolingConfig","","Specifies configuration parameters for a Pooling Layer.",null,null],[12,"mode","","The PoolingMode to use",14,null],[12,"filter_shape","","The shape of the filter",14,null],[12,"stride","","The stride size",14,null],[12,"padding","","The padding size",14,null],[4,"PoolingMode","","The different modes of pooling that can be calculated.",null,null],[13,"Max","","The maximum value inside the pooling window will be used as result.",15,null],[11,"clone","","",16,{"inputs":[{"name":"pooling"}],"output":{"name":"pooling"}}],[11,"fmt","","",16,{"inputs":[{"name":"pooling"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_config","","Create a Pooling layer from a PoolingConfig.",16,{"inputs":[{"name":"pooling"},{"name":"poolingconfig"}],"output":{"name":"pooling"}}],[11,"num_spatial_dims","","Calculates the number of spatial dimensions for the pooling operation.",16,null],[11,"calculate_output_shape","","",16,null],[11,"filter_shape","","",16,null],[11,"stride","","",16,null],[11,"padding","","",16,null],[11,"exact_num_output_blobs","","",16,{"inputs":[{"name":"pooling"}],"output":{"name":"option"}}],[11,"exact_num_input_blobs","","",16,{"inputs":[{"name":"pooling"}],"output":{"name":"option"}}],[11,"reshape","","",16,{"inputs":[{"name":"pooling"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",16,null],[11,"compute_input_gradient","","",16,null],[11,"clone","","",14,{"inputs":[{"name":"poolingconfig"}],"output":{"name":"poolingconfig"}}],[11,"fmt","","",14,{"inputs":[{"name":"poolingconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",14,{"inputs":[{"name":"poolingconfig"}],"output":{"name":"layertype"}}],[11,"clone","","",15,{"inputs":[{"name":"poolingmode"}],"output":{"name":"poolingmode"}}],[11,"fmt","","",15,{"inputs":[{"name":"poolingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sequential","leaf::layers::common","A container layer that runs operations sequentially on the contained layers.",null,null],[3,"Sequential","leaf::layers::common::sequential","Sequential Layer",null,null],[3,"SequentialConfig","","Specifies configuration parameters for a Sequential Layer.",null,null],[12,"layers","","Defines the layers of the container via [LayerConfig][layer_config]s.",17,null],[12,"inputs","","Defines the names and shapes of the input tensors.",17,null],[12,"force_backward","","Defines if the container will force every layer to do [backpropagation][1].\n[1]: https://en.wikipedia.org/wiki/Backpropagation",17,null],[11,"fmt","","",18,{"inputs":[{"name":"sequential"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Create a empty Sequential container layer.",18,{"inputs":[{"name":"sequential"}],"output":{"name":"sequential"}}],[11,"from_config","","Create a Sequential layer from a SequentialConfig.",18,{"inputs":[{"name":"sequential"},{"name":"rc"},{"name":"sequentialconfig"}],"output":{"name":"sequential"}}],[11,"init_layers","","Initializes a sequential container.",18,{"inputs":[{"name":"sequential"},{"name":"rc"},{"name":"sequentialconfig"}],"output":null}],[11,"is_container","","",18,{"inputs":[{"name":"sequential"}],"output":{"name":"bool"}}],[11,"inputs_data","","",18,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"inputs_gradients","","",18,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"outputs_data","","",18,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"outputs_gradients","","",18,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"learnable_weights","","",18,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"learnable_weights_gradients","","",18,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"resize_shared_workspace","","",18,{"inputs":[{"name":"sequential"},{"name":"rc"},{"name":"option"}],"output":{"name":"option"}}],[11,"forward","","",18,null],[11,"backward_input","","",18,null],[11,"backward_parameters","","",18,null],[11,"compute_output","","",18,null],[11,"compute_input_gradient","","",18,null],[11,"compute_parameters_gradient","","",18,null],[11,"clone","","",17,{"inputs":[{"name":"sequentialconfig"}],"output":{"name":"sequentialconfig"}}],[11,"fmt","","",17,{"inputs":[{"name":"sequentialconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find_in_place_output","","Tries to find the output of a previous layer that is usable as in-place output for the n-th layer.",17,{"inputs":[{"name":"sequentialconfig"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add_layer","","Add layer at the end of the sequential container.",17,{"inputs":[{"name":"sequentialconfig"},{"name":"layerconfig"}],"output":null}],[11,"add_input","","Add a input to the network.",17,null],[11,"into","","",17,{"inputs":[{"name":"sequentialconfig"}],"output":{"name":"layertype"}}],[11,"default","","",17,{"inputs":[{"name":"sequentialconfig"}],"output":{"name":"sequentialconfig"}}],[0,"softmax","leaf::layers::common","Computes the softmax of its input.",null,null],[3,"Softmax","leaf::layers::common::softmax","Softmax Layer",null,null],[11,"clone","","",19,{"inputs":[{"name":"softmax"}],"output":{"name":"softmax"}}],[11,"fmt","","",19,{"inputs":[{"name":"softmax"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reshape","","",19,{"inputs":[{"name":"softmax"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",19,null],[11,"compute_input_gradient","","",19,null],[11,"default","","",19,{"inputs":[{"name":"softmax"}],"output":{"name":"softmax"}}],[8,"FilterLayer","leaf::layers::common","Provides common utilities for Layers that utilize a filter with stride and padding.",null,null],[11,"calculate_spatial_output_dims","","Computes the shape of the spatial dimensions.",20,null],[10,"calculate_output_shape","","Calculate output shape based on the shape of filter, padding, stride and input.",20,null],[10,"num_spatial_dims","","Calculates the number of spatial dimensions for the pooling operation.",20,null],[11,"spatial_filter_dims","","Retrievs the spatial dimensions for the filter based on `self.filter_shape()`\nand the number of spatial dimensions.",20,{"inputs":[{"name":"filterlayer"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"stride_dims","","Retrievs the stride for the convolution based on `self.stride`\nand the number of spatial dimensions.",20,{"inputs":[{"name":"filterlayer"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"padding_dims","","Retrievs the padding for the convolution based on `self.padding`\nand the number of spatial dimensions.",20,{"inputs":[{"name":"filterlayer"},{"name":"usize"}],"output":{"name":"vec"}}],[10,"filter_shape","","The filter_shape that will be used by `spatial_filter_dims`.",20,null],[10,"stride","","The stride that will be used by `stride_dims`.",20,null],[10,"padding","","The padding that will be used by `padding_dims`.",20,null],[0,"loss","leaf::layers","Provides methods to calculate the loss (cost) of some output.",null,null],[0,"negative_log_likelihood","leaf::layers::loss","TODO: DOC",null,null],[3,"NegativeLogLikelihood","leaf::layers::loss::negative_log_likelihood","NegativeLogLikelihood Loss Layer",null,null],[3,"NegativeLogLikelihoodConfig","","Specifies configuration parameters for a NegativeLogLikelihood Layer.",null,null],[12,"num_classes","","How many different classes can be classified.",21,null],[11,"clone","","",22,{"inputs":[{"name":"negativeloglikelihood"}],"output":{"name":"negativeloglikelihood"}}],[11,"fmt","","",22,{"inputs":[{"name":"negativeloglikelihood"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_config","","Create a NegativeLogLikelihood layer from a NegativeLogLikelihoodConfig.",22,{"inputs":[{"name":"negativeloglikelihood"},{"name":"negativeloglikelihoodconfig"}],"output":{"name":"negativeloglikelihood"}}],[11,"exact_num_output_blobs","","",22,{"inputs":[{"name":"negativeloglikelihood"}],"output":{"name":"option"}}],[11,"exact_num_input_blobs","","",22,{"inputs":[{"name":"negativeloglikelihood"}],"output":{"name":"option"}}],[11,"auto_output_blobs","","",22,{"inputs":[{"name":"negativeloglikelihood"}],"output":{"name":"bool"}}],[11,"loss_weight","","",22,{"inputs":[{"name":"negativeloglikelihood"},{"name":"usize"}],"output":{"name":"option"}}],[11,"sync_native","","",22,{"inputs":[{"name":"negativeloglikelihood"}],"output":{"name":"bool"}}],[11,"reshape","","",22,{"inputs":[{"name":"negativeloglikelihood"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",22,null],[11,"compute_input_gradient","","",22,null],[11,"clone","","",21,{"inputs":[{"name":"negativeloglikelihoodconfig"}],"output":{"name":"negativeloglikelihoodconfig"}}],[11,"fmt","","",21,{"inputs":[{"name":"negativeloglikelihoodconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",21,{"inputs":[{"name":"negativeloglikelihoodconfig"}],"output":{"name":"layertype"}}],[0,"utility","leaf::layers","Provides various helpful layers, which might be not directly related to\nneural networks in general.",null,null],[0,"flatten","leaf::layers::utility","Flattens the bottom Blob into a simpler top Blob.",null,null],[3,"Flatten","leaf::layers::utility::flatten","Flattening Utility Layer",null,null],[11,"clone","","",23,{"inputs":[{"name":"flatten"}],"output":{"name":"flatten"}}],[11,"fmt","","",23,{"inputs":[{"name":"flatten"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"reshape","leaf::layers::utility","Utility layer to give a tensor another shape.",null,null],[3,"Reshape","leaf::layers::utility::reshape","Reshape Utility Layer",null,null],[3,"ReshapeConfig","","Specifies configuration parameters for a Reshape Layer.",null,null],[12,"shape","","The target shape that the input should assume.",24,null],[11,"clone","","",25,{"inputs":[{"name":"reshape"}],"output":{"name":"reshape"}}],[11,"fmt","","",25,{"inputs":[{"name":"reshape"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_config","","Create a Reshape layer from a ReshapeConfig.",25,{"inputs":[{"name":"reshape"},{"name":"reshapeconfig"}],"output":{"name":"reshape"}}],[11,"compute_in_place","","",25,{"inputs":[{"name":"reshape"}],"output":{"name":"bool"}}],[11,"auto_output_blobs","","",25,{"inputs":[{"name":"reshape"}],"output":{"name":"bool"}}],[11,"reshape","","",25,{"inputs":[{"name":"reshape"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",25,null],[11,"compute_input_gradient","","",25,null],[11,"clone","","",24,{"inputs":[{"name":"reshapeconfig"}],"output":{"name":"reshapeconfig"}}],[11,"fmt","","",24,{"inputs":[{"name":"reshapeconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"of_shape","","Create a ReshapeConfig that describes a Reshape layer with a provided shape.",24,null],[11,"into","","",24,{"inputs":[{"name":"reshapeconfig"}],"output":{"name":"layertype"}}],[0,"solver","leaf","Provides the generics and interfaces for the specific Solvers.",null,null],[3,"Solver","leaf::solver","Solver that optimizes a [Layer][1] with a given objective.\n[1]: ../layer/index.html",null,null],[12,"worker","","The implementation of the Solver",26,null],[3,"SolverConfig","","Configuration for a Solver",null,null],[12,"name","","Name of the solver.",27,null],[12,"network","","The [LayerConfig][1] that is used to initialize the network.\n[1]: ../layer/struct.LayerConfig.html",27,null],[12,"objective","","The [LayerConfig][1] that is used to initialize the objective.\n[1]: ../layer/struct.LayerConfig.html",27,null],[12,"solver","","The [Solver implementation][1] to be used.\n[1]: ../solvers/index.html",27,null],[12,"minibatch_size","","Accumulate gradients over `minibatch_size` instances.",27,null],[12,"lr_policy","","The learning rate policy to be used.",27,null],[12,"base_lr","","The base learning rate.",27,null],[12,"gamma","","gamma as used in the calculation of most learning rate policies.",27,null],[12,"stepsize","","The stepsize used in Step and Sigmoid learning policies.",27,null],[12,"clip_gradients","","The threshold for clipping gradients.",27,null],[12,"weight_decay","","The global [weight decay][1] multiplier for [regularization][2].\n[1]: http://www.alglib.net/dataanalysis/improvinggeneralization.php#header3\n[2]: https://cs231n.github.io/neural-networks-2/#reg",27,null],[12,"regularization_method","","The method of [regularization][1] to use.\n[1]: https://cs231n.github.io/neural-networks-2/#reg",27,null],[12,"momentum","","The [momentum][1] multiplier for [SGD solvers][2].\n[1]: https://en.wikipedia.org/wiki/Stochastic_gradient_descent#Momentum\n[2]: ../solvers/sgd/index.html",27,null],[4,"SolverKind","","All available types of solvers.",null,null],[13,"SGD","","Stochastic Gradient Descent.\nSee [SGDKind][1] for all available SGD solvers.\n[1]: ./enum.SGDKind.html",28,null],[4,"SGDKind","","All available types of Stochastic Gradient Descent solvers.",null,null],[13,"Momentum","","Stochastic Gradient Descent with Momentum. See [implementation][1]\n[1] ../solvers/",29,null],[4,"LRPolicy","","Learning Rate Policy for a [Solver][1]\n[1]: ./struct.Solver.html",null,null],[13,"Fixed","","always return base_lr",30,null],[13,"Step","","learning rate decays every `step` iterations.\nreturn base_lr * gamma ^ (floor(iter / step))",30,null],[13,"Exp","","return base_lr * gamma ^ iter",30,null],[4,"RegularizationMethod","","[Regularization][1] method for a [Solver][2].\n[1]: https://cs231n.github.io/neural-networks-2/#reg\n[2]: ./struct.Solver.html",null,null],[13,"L2","","L2 regularization",31,null],[0,"confusion_matrix","","TODO: DOC",null,null],[3,"ConfusionMatrix","leaf::solver::confusion_matrix","A [ConfusionMatrix][wiki].",null,null],[3,"Sample","","A single prediction Sample.",null,null],[3,"Accuracy","","The accuracy of the predictions in a ConfusionMatrix.",null,null],[11,"fmt","","",32,{"inputs":[{"name":"confusionmatrix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a ConfusionMatrix that analyzes the prediction of `num_classes` classes.",32,{"inputs":[{"name":"confusionmatrix"},{"name":"usize"}],"output":{"name":"confusionmatrix"}}],[11,"add_sample","","Add a sample by providing the expected `target` class and the `prediction`.",32,{"inputs":[{"name":"confusionmatrix"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"add_samples","","Add a batch of samples.",32,null],[11,"get_predictions","","Get the predicted classes from the output of a network.",32,{"inputs":[{"name":"confusionmatrix"},{"name":"sharedtensor"}],"output":{"name":"vec"}}],[11,"set_capacity","","Set the `capacity` of the ConfusionMatrix",32,{"inputs":[{"name":"confusionmatrix"},{"name":"option"}],"output":null}],[11,"samples","","Return all collected samples.",32,{"inputs":[{"name":"confusionmatrix"}],"output":{"name":"vecdeque"}}],[11,"accuracy","","Return the accuracy of the collected predictions.",32,{"inputs":[{"name":"confusionmatrix"}],"output":{"name":"accuracy"}}],[11,"clone","","",33,{"inputs":[{"name":"sample"}],"output":{"name":"sample"}}],[11,"fmt","","",33,{"inputs":[{"name":"sample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"correct","","Returns if the prediction is equal to the expected target.",33,{"inputs":[{"name":"sample"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"sample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"accuracy"}],"output":{"name":"accuracy"}}],[11,"fmt","","",34,{"inputs":[{"name":"accuracy"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"accuracy"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"ISolver","leaf::solver","Implementation of a specific Solver.",null,null],[11,"init","","Initialize the solver, setting up any network related data.",35,{"inputs":[{"name":"isolver"},{"name":"layer"}],"output":null}],[10,"compute_update","","Update the weights of the net with part of the gradient.",35,{"inputs":[{"name":"isolver"},{"name":"solverconfig"},{"name":"layer"},{"name":"usize"}],"output":null}],[10,"backend","","Returns the backend used by the solver.",35,{"inputs":[{"name":"isolver"}],"output":{"name":"solverb"}}],[11,"fmt","","",26,{"inputs":[{"name":"solver"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_config","","Create Solver from [SolverConfig][1]\n[1]: ./struct.SolverConfig.html",26,{"inputs":[{"name":"solver"},{"name":"rc"},{"name":"rc"},{"name":"solverconfig"}],"output":{"name":"solver"}}],[11,"train_minibatch","","Train the network with one minibatch",26,{"inputs":[{"name":"solver"},{"name":"arclock"},{"name":"arclock"}],"output":{"name":"arclock"}}],[11,"network","","Returns the network trained by the solver.",26,{"inputs":[{"name":"solver"}],"output":{"name":"layer"}}],[11,"mut_network","","Returns the network trained by the solver.",26,{"inputs":[{"name":"solver"}],"output":{"name":"layer"}}],[11,"fmt","leaf","",35,{"inputs":[{"name":"isolver"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","leaf::solver","",27,{"inputs":[{"name":"solverconfig"}],"output":{"name":"solverconfig"}}],[11,"fmt","","",27,{"inputs":[{"name":"solverconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",27,{"inputs":[{"name":"solverconfig"}],"output":{"name":"solverconfig"}}],[11,"get_learning_rate","","Return the learning rate for a supplied iteration.",27,{"inputs":[{"name":"solverconfig"},{"name":"usize"}],"output":{"name":"f32"}}],[11,"clone","","",28,{"inputs":[{"name":"solverkind"}],"output":{"name":"solverkind"}}],[11,"fmt","","",28,{"inputs":[{"name":"solverkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_config","","Create a Solver of the specified kind with the supplied SolverConfig.",28,{"inputs":[{"name":"solverkind"},{"name":"rc"},{"name":"solverconfig"}],"output":{"name":"box"}}],[11,"clone","","",29,{"inputs":[{"name":"sgdkind"}],"output":{"name":"sgdkind"}}],[11,"fmt","","",29,{"inputs":[{"name":"sgdkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_config","","Create a Solver of the specified kind with the supplied SolverConfig.",29,{"inputs":[{"name":"sgdkind"},{"name":"rc"},{"name":"solverconfig"}],"output":{"name":"box"}}],[11,"clone","","",30,{"inputs":[{"name":"lrpolicy"}],"output":{"name":"lrpolicy"}}],[11,"fmt","","",30,{"inputs":[{"name":"lrpolicy"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"regularizationmethod"}],"output":{"name":"regularizationmethod"}}],[11,"fmt","","",31,{"inputs":[{"name":"regularizationmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"solvers","leaf","Provides the trainers for the Layers.",null,null],[0,"sgd","leaf::solvers","Provides ISolver implementations based on [Stochastic Gradient\nDescent][2].\n[2]: https://en.wikipedia.org/wiki/Stochastic_gradient_descent",null,null],[0,"momentum","leaf::solvers::sgd","A [Stochastic Gradient Descent with Momentum][1]\n[1]: https://en.wikipedia.org/wiki/Stochastic_gradient_descent#Momentum",null,null],[3,"Momentum","leaf::solvers::sgd::momentum","Stochastic Gradient Descent with Momentum.",null,null],[11,"clone","","",36,{"inputs":[{"name":"momentum"}],"output":{"name":"momentum"}}],[11,"fmt","","",36,{"inputs":[{"name":"momentum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new SGD Momentum solver.",36,{"inputs":[{"name":"momentum"},{"name":"rc"}],"output":{"name":"momentum"}}],[11,"init","","Initialize the SGD Momentum solver, allocating memory for its history.",36,{"inputs":[{"name":"momentum"},{"name":"layer"}],"output":null}],[11,"compute_update","","",36,{"inputs":[{"name":"momentum"},{"name":"solverconfig"},{"name":"layer"},{"name":"usize"}],"output":null}],[11,"backend","","",36,{"inputs":[{"name":"momentum"}],"output":{"name":"solverb"}}],[0,"weight","leaf","Provides configuration of weights and their initialization.",null,null],[3,"WeightConfig","leaf::weight","Specifies training configuration for a weight blob.",null,null],[12,"name","","The name of the weight blob -- useful for sharing weights among\nlayers, but never required otherwise. To share a weight between two\nlayers, give it a (non-empty) name.",37,null],[12,"share_mode","","Whether to require shared weights to have the same shape, or just the same\ncount",37,null],[12,"lr_mult","","The multiplier on the global learning rate for this parameter.",37,null],[12,"decay_mult","","The multiplier on the global weight decay for this parameter.",37,null],[12,"filler","","The filler that initializes the weights in the weight blob.",37,null],[4,"DimCheckMode","","Enum for specifing the shared weights behaviour",null,null],[13,"Strict","","Strict requires that shapes match.",38,null],[13,"Permissive","","Permissive requires only the count of weights to match.",38,null],[4,"FillerType","","Enum for specifing the type of Filler.",null,null],[13,"Constant","","Fills the weight blob with a constant `value` (all values are the same).",39,null],[12,"value","leaf::weight::FillerType","The value that will be used to fill the blob.",39,null],[13,"Glorot","leaf::weight","Fills the weight blobs based on the paper:",39,null],[12,"input_size","leaf::weight::FillerType","Number of input nodes for each output.",39,null],[12,"output_size","","Number of output nodes for each input.",39,null],[11,"clone","leaf::weight","",37,{"inputs":[{"name":"weightconfig"}],"output":{"name":"weightconfig"}}],[11,"fmt","","",37,{"inputs":[{"name":"weightconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[{"name":"weightconfig"}],"output":{"name":"weightconfig"}}],[11,"check_dimensions","","Checks dimensions of two blobs according to the `share_mode`.\nReturns an error if there is a count/shape mismatch.",37,{"inputs":[{"name":"weightconfig"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"string"},{"name":"string"},{"name":"string"}],"output":{"name":"result"}}],[11,"lr_mult","","The multiplier on the global learning rate for this weight blob.",37,{"inputs":[{"name":"weightconfig"}],"output":{"name":"f32"}}],[11,"decay_mult","","The multiplier on the global weight decay for this weight blob.",37,{"inputs":[{"name":"weightconfig"}],"output":{"name":"f32"}}],[11,"clone","","",38,{"inputs":[{"name":"dimcheckmode"}],"output":{"name":"dimcheckmode"}}],[11,"fmt","","",38,{"inputs":[{"name":"dimcheckmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"fillertype"}],"output":{"name":"fillertype"}}],[11,"fmt","","",39,{"inputs":[{"name":"fillertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fill","","Uses a filler as specified by this FillerType to fill the values in a SharedTensor",39,{"inputs":[{"name":"fillertype"},{"name":"sharedtensor"}],"output":null}],[11,"fill_constant","","Directly use the [Constant Filler](#variant.Constant).",39,{"inputs":[{"name":"fillertype"},{"name":"sharedtensor"},{"name":"f32"}],"output":null}],[11,"fill_glorot","","Directly use the [Glorot Filler](#variant.Glorot).",39,{"inputs":[{"name":"fillertype"},{"name":"sharedtensor"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"util","leaf","Provides common utility functions",null,null],[5,"native_backend","leaf::util","Create a simple native backend.",null,{"inputs":[],"output":{"name":"backend"}}],[5,"write_to_memory","","Write into a native Collenchyma Memory.",null,null],[5,"write_to_memory_offset","","Write into a native Collenchyma Memory with a offset.",null,null],[5,"write_batch_sample","","Write the `i`th sample of a batch into a SharedTensor.",null,null],[5,"native_scalar","","Create a Collenchyma SharedTensor for a scalar value.",null,{"inputs":[{"name":"t"}],"output":{"name":"sharedtensor"}}],[5,"cast_vec_usize_to_i32","","Casts a Vec<usize> to as Vec<i32>",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[6,"ArcLock","","Shared Lock used for our tensors",null,null],[8,"Axpby","","Extends IBlas with Axpby",null,null],[11,"axpby","","Performs the operation y := a*x + b*y .",40,{"inputs":[{"name":"axpby"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"axpby_plain","","Performs the operation y := a*x + b*y .",40,{"inputs":[{"name":"axpby"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"SolverOps","","Encapsulates all traits required by Solvers.",null,null],[8,"LayerOps","","Encapsulates all traits used in Layers.",null,null],[14,"impl_ilayer_activation!","leaf","",null,null],[14,"impl_ilayer_common!","","",null,null],[14,"impl_ilayer_loss!","","",null,null],[14,"impl_isolver_sgd!","","Implement [ISolver][1] for [SGD solvers][2].\n[1]: ./solver/trait.ISolver.html\n[2]: ./solvers/sgd/index.html",null,null]],"paths":[[3,"Layer"],[3,"LayerConfig"],[4,"LayerType"],[8,"ILayer"],[8,"ComputeOutput"],[8,"ComputeInputGradient"],[8,"ComputeParametersGradient"],[3,"ReLU"],[3,"Sigmoid"],[3,"ConvolutionConfig"],[3,"Convolution"],[3,"LinearConfig"],[3,"Linear"],[3,"LogSoftmax"],[3,"PoolingConfig"],[4,"PoolingMode"],[3,"Pooling"],[3,"SequentialConfig"],[3,"Sequential"],[3,"Softmax"],[8,"FilterLayer"],[3,"NegativeLogLikelihoodConfig"],[3,"NegativeLogLikelihood"],[3,"Flatten"],[3,"ReshapeConfig"],[3,"Reshape"],[3,"Solver"],[3,"SolverConfig"],[4,"SolverKind"],[4,"SGDKind"],[4,"LRPolicy"],[4,"RegularizationMethod"],[3,"ConfusionMatrix"],[3,"Sample"],[3,"Accuracy"],[8,"ISolver"],[3,"Momentum"],[3,"WeightConfig"],[4,"DimCheckMode"],[4,"FillerType"],[8,"Axpby"]]};
searchIndex['collenchyma_blas'] = {"items":[[0,"plugin","collenchyma_blas","Provides the IBlas library trait for Collenchyma implementation.",null,null],[8,"IBlas","collenchyma_blas::plugin","Provides the functionality for a backend to support Basic Linear Algebra Subprogram operations.",null,null],[8,"Asum","","Provides the asum operation.",null,null],[10,"asum","","Computes the absolute sum of vector `x` with complete memory management.",0,{"inputs":[{"name":"asum"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"asum_plain","","Computes the absolute sum of vector `x` without any memory management.",0,{"inputs":[{"name":"asum"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Axpy","","Provides the axpy operation.",null,null],[10,"axpy","","Computes a vector `x` times a constant `a` plus a vector `y` aka. `a * x + y` with complete memory management.",1,{"inputs":[{"name":"axpy"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"axpy_plain","","Computes a vector `x` times a constant `a` plus a vector `y` aka. `a * x + y` without any memory management.",1,{"inputs":[{"name":"axpy"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Copy","","Provides the copy operation.",null,null],[10,"copy","","Copies `x.len()` elements of vector `x` into vector `y` with complete memory management.",2,{"inputs":[{"name":"copy"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"copy_plain","","Copies `x.len()` elements of vector `x` into vector `y` without any memory management.",2,{"inputs":[{"name":"copy"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Dot","","Provides the dot operation.",null,null],[10,"dot","","Computes the [dot product][dot-product] over x and y with complete memory management.\n[dot-product]: https://en.wikipedia.org/wiki/Dot_product",3,{"inputs":[{"name":"dot"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"dot_plain","","Computes the [dot product][dot-product] over x and y without any memory management.\n[dot-product]: https://en.wikipedia.org/wiki/Dot_product",3,{"inputs":[{"name":"dot"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Nrm2","","Provides the nrm2 operation.",null,null],[10,"nrm2","","Computes the L2 norm aka. euclidean length of vector `x` with complete memory management.",4,{"inputs":[{"name":"nrm2"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"nrm2_plain","","Computes the L2 norm aka. euclidean length of vector `x` without any memory management.",4,{"inputs":[{"name":"nrm2"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Scal","","Provides the scal operation.",null,null],[10,"scal","","Scales a vector `x` by a constant `a` aka. `a * x` with complete memory management.",5,{"inputs":[{"name":"scal"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"scal_plain","","Scales a vector `x` by a constant `a` aka. `a * x` without any memory management.",5,{"inputs":[{"name":"scal"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Swap","","Provides the swap operation.",null,null],[10,"swap","","Swaps the content of vector `x` and vector `y` with complete memory management.",6,{"inputs":[{"name":"swap"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"swap_plain","","Swaps the content of vector `x` and vector `y` without any memory management.",6,{"inputs":[{"name":"swap"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Gemm","","Provides the gemm operation.",null,null],[10,"gemm","","Computes a matrix-matrix product with general matrices.",7,{"inputs":[{"name":"gemm"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"gemm_plain","","Computes a matrix-matrix product with general matrices.",7,{"inputs":[{"name":"gemm"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"BlasBinaryProvider","","Allows a BlasBinary to be provided which is used for a IBlas implementation.",null,null],[10,"binary","","Returns the binary representation",8,{"inputs":[{"name":"blasbinaryprovider"}],"output":{"name":"b"}}],[10,"device","","Returns the device representation",8,{"inputs":[{"name":"blasbinaryprovider"}],"output":{"name":"devicetype"}}],[0,"binary","collenchyma_blas","Provides the IBlasBinary binary trait for Collenchyma's Framework implementation.",null,null],[8,"IBlasBinary","collenchyma_blas::binary","Describes the operation binding for a Blas Binary implementation.",null,null],[16,"Asum","","Describes the Asum Operation.",9,null],[16,"Axpy","","Describes the Axpy Operation.",9,null],[16,"Copy","","Describes the Copy Operation.",9,null],[16,"Dot","","Describes the Dot Operation.",9,null],[16,"Nrm2","","Describes the Nrm2 Operation.",9,null],[16,"Scale","","Describes the Scale Operation.",9,null],[16,"Swap","","Describes the Swap Operation.",9,null],[10,"asum","","Returns an initialized Asum operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"asum"}}],[10,"axpy","","Returns an initialized Axpy operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"axpy"}}],[10,"copy","","Returns an initialized Copy operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"copy"}}],[10,"dot","","Returns an initialized Dot operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"dot"}}],[10,"nrm2","","Returns an initialized Nrm2 operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"nrm2"}}],[10,"scale","","Returns an initialized Scale operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"scale"}}],[10,"swap","","Returns an initialized Swap operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"swap"}}],[0,"operation","collenchyma_blas","Provides the IOperationX operation traits for Collenchyma's Framework implementation.",null,null],[8,"IOperationAsum","collenchyma_blas::operation","Describes a Asum Operation.",null,null],[10,"compute","","Computes the Asum operation.",10,{"inputs":[{"name":"ioperationasum"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationAxpy","","Describes a Axpy Operation.",null,null],[10,"compute","","Computes the Axpy operation.",11,{"inputs":[{"name":"ioperationaxpy"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationCopy","","Describes a Copy Operation.",null,null],[10,"compute","","Computes the Copy operation.",12,{"inputs":[{"name":"ioperationcopy"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationDot","","Describes a Dot Operation.",null,null],[10,"compute","","Computes the Dot operation.",13,{"inputs":[{"name":"ioperationdot"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationNrm2","","Describes a Nrm2 Operation.",null,null],[10,"compute","","Computes the Nrm2 operation.",14,{"inputs":[{"name":"ioperationnrm2"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationScale","","Describes a Scale Operation.",null,null],[10,"compute","","Computes the Scale operation.",15,{"inputs":[{"name":"ioperationscale"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationSwap","","Describes a Swap Operation.",null,null],[10,"compute","","Computes the Swap operation.",16,{"inputs":[{"name":"ioperationswap"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationGemm","","Describes a Gemm Operation.",null,null],[10,"compute","","Computes the Gemm operation.",17,null],[0,"transpose","collenchyma_blas","Provides the Transpose functionality for Matrix operations.",null,null],[4,"Transpose","collenchyma_blas::transpose","Possible transpose operations that can be applied in Level 2 and Level 3 BLAS operations.",null,null],[13,"NoTrans","","Take the matrix as it is.",18,null],[13,"Trans","","Take the transpose of the matrix.",18,null],[13,"ConjTrans","","Take the conjugate transpose of the matrix.",18,null],[11,"clone","","",18,{"inputs":[{"name":"transpose"}],"output":{"name":"transpose"}}],[11,"fmt","","",18,{"inputs":[{"name":"transpose"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_rblas","","Create a rust-blas `Transpose` from collenchyma-blas `Transpose`.",18,{"inputs":[{"name":"transpose"}],"output":{"name":"transpose"}}],[0,"helper","collenchyma_blas","Provides macros for convenient implementation of BLAS operations.",null,null],[0,"frameworks","","Provides the specific Framework implementations for the Library Operations.",null,null],[0,"native","collenchyma_blas::frameworks","Provides BLAS for a Native backend.",null,null],[11,"compute","collenchyma::backend","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,null],[11,"asum","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"asum_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"axpy","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"axpy_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"copy","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"copy_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"dot","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"dot_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"nrm2","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"nrm2_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"scal","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"scal_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"swap","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"swap_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"gemm","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"gemm_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,null],[11,"asum","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"asum_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"axpy","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"axpy_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"copy","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"copy_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"dot","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"dot_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"nrm2","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"nrm2_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"scal","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"scal_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"swap","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"swap_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"gemm","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"gemm_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[14,"iblas_asum_for!","collenchyma_blas","",null,null],[14,"iblas_axpy_for!","","",null,null],[14,"iblas_copy_for!","","",null,null],[14,"iblas_dot_for!","","",null,null],[14,"iblas_nrm2_for!","","",null,null],[14,"iblas_scale_for!","","",null,null],[14,"iblas_swap_for!","","",null,null],[14,"iblas_gemm_for!","","",null,null]],"paths":[[8,"Asum"],[8,"Axpy"],[8,"Copy"],[8,"Dot"],[8,"Nrm2"],[8,"Scal"],[8,"Swap"],[8,"Gemm"],[8,"BlasBinaryProvider"],[8,"IBlasBinary"],[8,"IOperationAsum"],[8,"IOperationAxpy"],[8,"IOperationCopy"],[8,"IOperationDot"],[8,"IOperationNrm2"],[8,"IOperationScale"],[8,"IOperationSwap"],[8,"IOperationGemm"],[4,"Transpose"],[3,"Backend"]]};
searchIndex['collenchyma_nn'] = {"items":[[4,"ConvForwardAlgo","collenchyma_nn","Different algorithms to compute the convolution forward algorithm.",null,null],[13,"Auto","","Attempt to automatically find the best algorithm of all the other available ones.",0,null],[13,"GEMM","","Compute the convolution as explicit matrix product.",0,null],[13,"ImplicitGEMM","","Compute the convolution as matrix product without forming the matrix that holds the input data.",0,null],[13,"ImplicitPrecompiledGEMM","","Similar to `ImplicitGEMM` but needs some workspace to precompile the implicit indices.",0,null],[13,"FFT","","Compute the convolution as Fast-Fourier Transform.",0,null],[13,"FFTTiling","","Compute the convolution as Fast-Fourier Transform with 32x32 tiles.",0,null],[13,"Direct","","Compute the convolution without implicit or explicit matrix-multiplication. **Do not try to use this**.",0,null],[4,"ConvBackwardFilterAlgo","","Different algorithms to compute the gradient with respect to the filter.",null,null],[13,"Auto","","Attempt to automatically find the best algorithm of all the other available ones.",1,null],[13,"ImplicitGEMM","","Compute the convolution as matrix product without forming the matrix that holds the input data.",1,null],[13,"ImplicitGEMMSum","","Compute the convolution as sum of matrix product without forming the matrix that holds the input data.",1,null],[13,"ImplicitPrecompiledGEMMSum","","Similar to `ImplicitGEMMSum` but needs some workspace to precompile the implicit indices.",1,null],[13,"FFT","","Compute the convolution as Fast-Fourier Transform.",1,null],[4,"ConvBackwardDataAlgo","","Different algorithms to compute the gradient with respect to the filter.",null,null],[13,"Auto","","Attempt to automatically find the best algorithm of all the other available ones.",2,null],[13,"ImplicitGEMM","","Compute the convolution as matrix product without forming the matrix that holds the input data.",2,null],[13,"ImplicitGEMMSum","","Compute the convolution as sum of matrix product without forming the matrix that holds the input data.",2,null],[13,"FFT","","Compute the convolution as Fast-Fourier Transform.",2,null],[13,"FFTTiling","","Compute the convolution as Fast-Fourier Transform with 32x32 tiles.",2,null],[11,"clone","","",0,{"inputs":[{"name":"convforwardalgo"}],"output":{"name":"convforwardalgo"}}],[11,"fmt","","",0,{"inputs":[{"name":"convforwardalgo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_auto","","Check if algorithim should be chosen automatically.",0,{"inputs":[{"name":"convforwardalgo"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"convbackwardfilteralgo"}],"output":{"name":"convbackwardfilteralgo"}}],[11,"fmt","","",1,{"inputs":[{"name":"convbackwardfilteralgo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_auto","","Check if algorithim should be chosen automatically.",1,{"inputs":[{"name":"convbackwardfilteralgo"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"convbackwarddataalgo"}],"output":{"name":"convbackwarddataalgo"}}],[11,"fmt","","",2,{"inputs":[{"name":"convbackwarddataalgo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_auto","","Check if algorithim should be chosen automatically.",2,{"inputs":[{"name":"convbackwarddataalgo"}],"output":{"name":"bool"}}],[0,"frameworks","","Provides the specific Framework implementations for the Library Operations.",null,null],[0,"native","collenchyma_nn::frameworks","Provides NN for a Native backend.",null,null],[0,"helper","collenchyma_nn::frameworks::native","Provides useful macros for easier NN implementation for native.",null,null],[3,"ConvolutionConfig","collenchyma_nn::frameworks::native::helper","",null,null],[3,"NormalizationConfig","","",null,null],[3,"PoolingConfig","","",null,null],[5,"write_to_memory","","Just a helper function until SharedTensor has a nice interface for writing data",null,{"inputs":[{"name":"memorytype"},{"name":"t"}],"output":null}],[5,"sigmoid","","Computes the Sigmoid Function on the CPU",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"sigmoid_grad","","Computes the Sigmoid Gradient on the CPU",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"relu","","Computes the ReLU Function on the CPU",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"relu_grad","","Computes the ReLU Gradient on the CPU",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"tanh","","Computes the Tanh Function on the CPU",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"tanh_grad","","Computes the Tanh Gradient on the CPU",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","","",3,{"inputs":[{"name":"convolutionconfig"}],"output":{"name":"convolutionconfig"}}],[11,"fmt","","",3,{"inputs":[{"name":"convolutionconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"normalizationconfig"}],"output":{"name":"normalizationconfig"}}],[11,"fmt","","",4,{"inputs":[{"name":"normalizationconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"poolingconfig"}],"output":{"name":"poolingconfig"}}],[11,"fmt","","",5,{"inputs":[{"name":"poolingconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"init_nn","collenchyma::backend","",6,{"inputs":[{"name":"backend"}],"output":null}],[11,"device","","",6,{"inputs":[{"name":"backend"}],"output":{"name":"devicetype"}}],[11,"sigmoid","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"init_nn","","",6,{"inputs":[{"name":"backend"}],"output":null}],[11,"device","","",6,{"inputs":[{"name":"backend"}],"output":{"name":"devicetype"}}],[11,"sigmoid","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"NNOperationConfig","collenchyma_nn","Provides generic NN Operation Config functionality.",null,null],[8,"ConvolutionConfig","","Provides Convolution Config functionality.",null,null],[11,"workspace_size","","Returns the largest workspace size in bytes needed\nfor any of the convolution operations.",7,{"inputs":[{"name":"convolutionconfig"}],"output":{"name":"usize"}}],[8,"NN","","Provides the functionality for a backend to support Neural Network related operations.",null,null],[16,"CC","","The Convolution Operation Config representation for this Plugin.",8,null],[16,"CLRN","","The LRN Operation Config representation for this Plugin.",8,null],[16,"CPOOL","","The Pooling Operation Config representation for this Plugin.",8,null],[10,"init_nn","","Initializes the Plugin.",8,{"inputs":[{"name":"nn"}],"output":null}],[10,"device","","Returns the device on which the Plugin operations will run.",8,{"inputs":[{"name":"nn"}],"output":{"name":"devicetype"}}],[8,"Sigmoid","","Provides the functionality for a Backend to support Sigmoid operations.",null,null],[10,"sigmoid","","Computes the [Sigmoid function][sigmoid] over the input Tensor `x` with complete memory management.\n[sigmoid]: https://en.wikipedia.org/wiki/Sigmoid_function",9,{"inputs":[{"name":"sigmoid"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_plain","","Computes the Sigmoid function over the input Tensor `x` without any memory management.",9,{"inputs":[{"name":"sigmoid"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_grad","","Computes the gradient of a [Sigmoid function][sigmoid] over the input Tensor `x` with complete memory management.\n[sigmoid]: https://en.wikipedia.org/wiki/Sigmoid_function",9,{"inputs":[{"name":"sigmoid"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_grad_plain","","Computes the gradient of a Sigmoid function over the input Tensor `x` without any memory management.",9,{"inputs":[{"name":"sigmoid"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"SigmoidPointwise","","Provides the functionality for pointwise Sigmoid operations (overwrites the input with the result of the operation).",null,null],[10,"sigmoid_pointwise","","Computes the [Sigmoid function][sigmoid] over the input Tensor `x` with complete memory management.\n[sigmoid]: https://en.wikipedia.org/wiki/Sigmoid_function",10,{"inputs":[{"name":"sigmoidpointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_pointwise_plain","","Computes the Sigmoid function over the input Tensor `x` without any memory management.",10,{"inputs":[{"name":"sigmoidpointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_pointwise_grad","","Computes the gradient of a [Sigmoid function][sigmoid] over the input Tensor `x` with complete memory management.\n[sigmoid]: https://en.wikipedia.org/wiki/Sigmoid_function",10,{"inputs":[{"name":"sigmoidpointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_pointwise_grad_plain","","Computes the gradient of a Sigmoid function over the input Tensor `x` without any memory management.",10,{"inputs":[{"name":"sigmoidpointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Relu","","Provides the functionality for a Backend to support ReLU operations.",null,null],[10,"relu","","Computes the [Rectified linear units][relu] over the input Tensor `x` with complete memory management.\n[relu]: https://en.wikipedia.org/wiki/Rectifier_(neural_networks)",11,{"inputs":[{"name":"relu"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_plain","","Computes the ReLU over the input Tensor `x` without any memory management.",11,{"inputs":[{"name":"relu"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_grad","","Computes the gradient of [ReLU][relu] over the input Tensor `x` with complete memory management.\n[relu]: https://en.wikipedia.org/wiki/Rectifier_(neural_networks)",11,{"inputs":[{"name":"relu"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_grad_plain","","Computes the gradient of ReLU over the input Tensor `x` without any memory management.",11,{"inputs":[{"name":"relu"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"ReluPointwise","","Provides the functionality for pointwise ReLU operations (overwrites the input with the result of the operation).",null,null],[10,"relu_pointwise","","Computes the [Rectified linear units][relu] over the input Tensor `x` with complete memory management.\n[relu]: https://en.wikipedia.org/wiki/Rectifier_(neural_networks)",12,{"inputs":[{"name":"relupointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_pointwise_plain","","Computes the ReLU over the input Tensor `x` without any memory management.",12,{"inputs":[{"name":"relupointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_pointwise_grad","","Computes the gradient of [ReLU][relu] over the input Tensor `x` with complete memory management.\n[relu]: https://en.wikipedia.org/wiki/Rectifier_(neural_networks)",12,{"inputs":[{"name":"relupointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_pointwise_grad_plain","","Computes the gradient of ReLU over the input Tensor `x` without any memory management.",12,{"inputs":[{"name":"relupointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Tanh","","Provides the functionality for a Backend to support TanH operations.",null,null],[10,"tanh","","Computes the [hyperbolic Tangent][tanh] over the input Tensor `x` with complete memory management.\n[tanh]: https://en.wikipedia.org/wiki/Hyperbolic_function",13,{"inputs":[{"name":"tanh"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_plain","","Computes the tanh over the input Tensor `x` without any memory management.",13,{"inputs":[{"name":"tanh"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_grad","","Computes the gradient of [tanh][tanh] over the input Tensor `x` with complete memory management.\n[tanh]: https://en.wikipedia.org/wiki/Hyperbolic_function",13,{"inputs":[{"name":"tanh"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_grad_plain","","Computes the gradient of tanh over the input Tensor `x` without any memory management.",13,{"inputs":[{"name":"tanh"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"TanhPointwise","","Provides the functionality for pointwise ReLU operations (overwrites the input with the result of the operation).",null,null],[10,"tanh_pointwise","","Computes the [hyperbolic Tangent][tanh] over the input Tensor `x` with complete memory management.\n[tanh]: https://en.wikipedia.org/wiki/Hyperbolic_function",14,{"inputs":[{"name":"tanhpointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_pointwise_plain","","Computes the tanh over the input Tensor `x` without any memory management.",14,{"inputs":[{"name":"tanhpointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_pointwise_grad","","Computes the gradient of [tanh][tanh] over the input Tensor `x` with complete memory management.\n[tanh]: https://en.wikipedia.org/wiki/Hyperbolic_function",14,{"inputs":[{"name":"tanhpointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_pointwise_grad_plain","","Computes the gradient of tanh over the input Tensor `x` without any memory management.",14,{"inputs":[{"name":"tanhpointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Convolution","","Provides the functionality for a Backend to support Convolution operations.",null,null],[10,"new_convolution_config","","Creates a new ConvolutionConfig, which needs to be passed to further convolution Operations.",15,null],[10,"convolution","","Computes a [CNN convolution][convolution] over the input Tensor `x` with complete memory management.\n[convolution]: https://en.wikipedia.org/wiki/Convolutional_neural_network",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[10,"convolution_plain","","Computes the convolution over the input Tensor `x` without any memory management.",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[10,"convolution_grad_filter","","Computes the gradient of a [CNN convolution][convolution] with respect to the filter and complete memory management.\n[convolution]: https://en.wikipedia.org/wiki/Convolutional_neural_network",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[10,"convolution_grad_filter_plain","","Computes the gradient of a convolution with respect to the filter and without any memory management.",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[10,"convolution_grad_data","","Computes the gradient of a [CNN convolution][convolution] over the input Tensor `x` with respect to the data and complete memory management.\n[convolution]: https://en.wikipedia.org/wiki/Convolutional_neural_network",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[10,"convolution_grad_data_plain","","Computes the gradient of a convolution over the input Tensor `x` with respect to the data and without any memory management.",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[8,"Softmax","","Provides the functionality for a Backend to support Softmax operations.",null,null],[10,"softmax","","Computes a [Softmax][softmax] over the input Tensor `x` with complete memory management.\n[softmax]: https://en.wikipedia.org/wiki/Softmax_function",16,{"inputs":[{"name":"softmax"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"softmax_plain","","Computes the softmax over the input Tensor `x` without any memory management.",16,{"inputs":[{"name":"softmax"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"softmax_grad","","Computes the gradient of a [Softmax][softmax] over the input Tensor `x` with complete memory management.\n[softmax]: https://en.wikipedia.org/wiki/Softmax_function",16,{"inputs":[{"name":"softmax"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"softmax_grad_plain","","Computes the gradient of a softmax over the input Tensor `x` without any memory management.",16,{"inputs":[{"name":"softmax"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"LogSoftmax","","Provides the functionality for a Backend to support LogSoftmax operations.",null,null],[10,"log_softmax","","Computes a logarithmic softmax over the input Tensor `x` with complete memory management.",17,{"inputs":[{"name":"logsoftmax"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"log_softmax_plain","","Computes the logarithmic softmax over the input Tensor `x` without any memory management.",17,{"inputs":[{"name":"logsoftmax"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"log_softmax_grad","","Computes the gradient of a logarithmic softmax over the input Tensor `x` with complete memory management.",17,{"inputs":[{"name":"logsoftmax"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"log_softmax_grad_plain","","Computes the gradient of a logarithmic softmax over the input Tensor `x` without any memory management.",17,{"inputs":[{"name":"logsoftmax"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"LRN","","Provides the functionality for a Backend to support Local Response Normalization operations.",null,null],[10,"new_lrn_config","","Creates a new (Local Response Normalization) LRNConfig, which needs to be passed to further LRN Operations.",18,{"inputs":[{"name":"lrn"},{"name":"u32"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"result"}}],[10,"lrn","","Computes a [LRN][lrn] over the input Tensor `x` with complete memory management.\n[lrn]: https://en.wikipedia.org/wiki/lrnal_neural_network",18,{"inputs":[{"name":"lrn"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"clrn"}],"output":{"name":"result"}}],[10,"lrn_plain","","Computes the LRN over the input Tensor `x` without any memory management.",18,{"inputs":[{"name":"lrn"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"clrn"}],"output":{"name":"result"}}],[10,"lrn_grad","","Computes the gradient of a [LRN][lrn] over the input Tensor `x` with complete memory management.\n[lrn]: https://en.wikipedia.org/wiki/lrnal_neural_network",18,{"inputs":[{"name":"lrn"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"clrn"}],"output":{"name":"result"}}],[10,"lrn_grad_plain","","Computes the gradient of a LRN over the input Tensor `x` without any memory management.",18,{"inputs":[{"name":"lrn"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"clrn"}],"output":{"name":"result"}}],[8,"Pooling","","Provides the functionality for a Backend to support Pooling operations.",null,null],[10,"new_pooling_config","","Creates a new PoolingConfig, which needs to be passed to further pooling Operations.",19,null],[10,"pooling_max","","Computes non-linear down-sampling ([max Pooling][pooling]) over the input Tensor `x` with complete memory management.\n[pooling]: https://en.wikipedia.org/wiki/Convolutional_neural_network#Pooling_layer",19,{"inputs":[{"name":"pooling"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cpool"}],"output":{"name":"result"}}],[10,"pooling_max_plain","","Computes the max pooling over the input Tensor `x` without any memory management.",19,{"inputs":[{"name":"pooling"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cpool"}],"output":{"name":"result"}}],[10,"pooling_max_grad","","Computes the gradient of [max Pooling][pooling] over the input Tensor `x` with complete memory management.\n[pooling]: https://en.wikipedia.org/wiki/Convolutional_neural_network#Pooling_layer",19,{"inputs":[{"name":"pooling"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cpool"}],"output":{"name":"result"}}],[10,"pooling_max_grad_plain","","Computes the gradient of max pooling over the input Tensor `x` without any memory management.",19,{"inputs":[{"name":"pooling"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cpool"}],"output":{"name":"result"}}],[14,"impl_ops_sigmoid_for!","","",null,null],[14,"impl_ops_relu_for!","","",null,null],[14,"impl_ops_tanh_for!","","",null,null],[14,"impl_ops_convolution_for!","","",null,null],[14,"impl_ops_softmax_for!","","",null,null],[14,"impl_ops_log_softmax_for!","","",null,null],[14,"impl_ops_lrn_for!","","",null,null],[14,"impl_ops_pooling_for!","","",null,null],[11,"workspace_size","","Returns the largest workspace size in bytes needed\nfor any of the convolution operations.",7,{"inputs":[{"name":"convolutionconfig"}],"output":{"name":"usize"}}]],"paths":[[4,"ConvForwardAlgo"],[4,"ConvBackwardFilterAlgo"],[4,"ConvBackwardDataAlgo"],[3,"ConvolutionConfig"],[3,"NormalizationConfig"],[3,"PoolingConfig"],[3,"Backend"],[8,"ConvolutionConfig"],[8,"NN"],[8,"Sigmoid"],[8,"SigmoidPointwise"],[8,"Relu"],[8,"ReluPointwise"],[8,"Tanh"],[8,"TanhPointwise"],[8,"Convolution"],[8,"Softmax"],[8,"LogSoftmax"],[8,"LRN"],[8,"Pooling"]]};
searchIndex['rblas'] = {"items":[[0,"attribute","rblas","Various attributes of vectors and matrices.",null,null],[4,"Order","rblas::attribute","",null,null],[13,"RowMajor","","",0,null],[13,"ColMajor","","",0,null],[4,"Transpose","","",null,null],[13,"NoTrans","","",1,null],[13,"Trans","","",1,null],[13,"ConjTrans","","",1,null],[4,"Symmetry","","",null,null],[13,"Upper","","",2,null],[13,"Lower","","",2,null],[4,"Diagonal","","",null,null],[13,"NonUnit","","",3,null],[13,"Unit","","",3,null],[4,"Side","","",null,null],[13,"Left","","",4,null],[13,"Right","","",4,null],[11,"clone","","",0,{"inputs":[{"name":"order"}],"output":{"name":"order"}}],[11,"clone","","",1,{"inputs":[{"name":"transpose"}],"output":{"name":"transpose"}}],[11,"clone","","",2,{"inputs":[{"name":"symmetry"}],"output":{"name":"symmetry"}}],[11,"clone","","",3,{"inputs":[{"name":"diagonal"}],"output":{"name":"diagonal"}}],[11,"clone","","",4,{"inputs":[{"name":"side"}],"output":{"name":"side"}}],[0,"default","rblas","",null,null],[8,"Default","rblas::default","",null,null],[10,"one","","",5,{"inputs":[{"name":"default"}],"output":{"name":"self"}}],[10,"zero","","",5,{"inputs":[{"name":"default"}],"output":{"name":"self"}}],[10,"neg_one","","",5,{"inputs":[{"name":"default"}],"output":{"name":"self"}}],[11,"one","num::complex","",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"zero","","",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg_one","","",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"one","","",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"zero","","",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg_one","","",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[0,"vector","rblas","Vector operations.",null,null],[0,"ll","rblas::vector","Bindings for vector functions.",null,null],[0,"cblas_s","rblas::vector::ll","",null,null],[5,"cblas_scopy","rblas::vector::ll::cblas_s","",null,null],[5,"cblas_saxpy","","",null,null],[5,"cblas_sscal","","",null,null],[5,"cblas_sswap","","",null,null],[5,"cblas_sdsdot","","",null,null],[5,"cblas_sdot","","",null,null],[5,"cblas_sasum","","",null,null],[5,"cblas_scasum","","",null,null],[5,"cblas_snrm2","","",null,null],[5,"cblas_scnrm2","","",null,null],[5,"cblas_srot","","",null,null],[5,"cblas_srotm","","",null,null],[5,"cblas_srotg","","",null,null],[5,"cblas_srotmg","","",null,null],[0,"cblas_d","rblas::vector::ll","",null,null],[5,"cblas_dcopy","rblas::vector::ll::cblas_d","",null,null],[5,"cblas_daxpy","","",null,null],[5,"cblas_dscal","","",null,null],[5,"cblas_dswap","","",null,null],[5,"cblas_dsdot","","",null,null],[5,"cblas_ddot","","",null,null],[5,"cblas_dasum","","",null,null],[5,"cblas_dzasum","","",null,null],[5,"cblas_dnrm2","","",null,null],[5,"cblas_dznrm2","","",null,null],[5,"cblas_drot","","",null,null],[5,"cblas_drotm","","",null,null],[5,"cblas_drotg","","",null,null],[5,"cblas_drotmg","","",null,null],[0,"cblas_c","rblas::vector::ll","",null,null],[5,"cblas_ccopy","rblas::vector::ll::cblas_c","",null,null],[5,"cblas_caxpy","","",null,null],[5,"cblas_cscal","","",null,null],[5,"cblas_csscal","","",null,null],[5,"cblas_cswap","","",null,null],[5,"cblas_cdotu_sub","","",null,null],[5,"cblas_cdotc_sub","","",null,null],[0,"cblas_z","rblas::vector::ll","",null,null],[5,"cblas_zcopy","rblas::vector::ll::cblas_z","",null,null],[5,"cblas_zaxpy","","",null,null],[5,"cblas_zscal","","",null,null],[5,"cblas_zdscal","","",null,null],[5,"cblas_zswap","","",null,null],[5,"cblas_zdotu_sub","","",null,null],[5,"cblas_zdotc_sub","","",null,null],[0,"cblas_i","rblas::vector::ll","",null,null],[5,"cblas_isamax","rblas::vector::ll::cblas_i","",null,null],[5,"cblas_idamax","","",null,null],[5,"cblas_icamax","","",null,null],[5,"cblas_izamax","","",null,null],[0,"ops","rblas::vector","Wrappers for vector functions.",null,null],[8,"Copy","rblas::vector::ops","",null,null],[10,"copy","","Copies `src.len()` elements of `src` into `dst`.",7,{"inputs":[{"name":"copy"},{"name":"v"},{"name":"w"}],"output":null}],[10,"copy_mat","","Copies the entire matrix `dst` into `src`.",7,{"inputs":[{"name":"copy"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[8,"Axpy","","Computes `a * x + y` and stores the result in `y`.",null,null],[10,"axpy","","",8,{"inputs":[{"name":"axpy"},{"name":"self"},{"name":"v"},{"name":"w"}],"output":null}],[10,"axpy_mat","","",8,{"inputs":[{"name":"axpy"},{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[8,"Scal","","Computes `a * x` and stores the result in `x`.",null,null],[10,"scal","","",9,{"inputs":[{"name":"scal"},{"name":"self"},{"name":"v"}],"output":null}],[10,"scal_mat","","",9,{"inputs":[{"name":"scal"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Swap","","Swaps the content of `x` and `y`.",null,null],[10,"swap","","If they are different lengths, the shorter length is used.",10,{"inputs":[{"name":"swap"},{"name":"v"},{"name":"w"}],"output":null}],[8,"Dot","","Computes `x^T * y`.",null,null],[10,"dot","","",11,{"inputs":[{"name":"dot"},{"name":"v"},{"name":"w"}],"output":{"name":"self"}}],[8,"Dotc","","Computes `x^H * y`.",null,null],[11,"dotc","","",12,{"inputs":[{"name":"dotc"},{"name":"v"},{"name":"w"}],"output":{"name":"self"}}],[8,"Asum","","Computes the sum of the absolute values of elements in a vector.",null,null],[10,"asum","","",13,{"inputs":[{"name":"asum"},{"name":"v"}],"output":{"name":"self"}}],[8,"Nrm2","","Computes the L2 norm (Euclidian length) of a vector.",null,null],[10,"nrm2","","",14,{"inputs":[{"name":"nrm2"},{"name":"v"}],"output":{"name":"self"}}],[8,"Iamax","","Finds the index of the maximum element in a vector.",null,null],[10,"iamax","","",15,{"inputs":[{"name":"iamax"},{"name":"v"}],"output":{"name":"usize"}}],[8,"Rot","","Applies a Givens rotation matrix to a pair of vectors, where `cos` is\nthe value of the cosine of the angle in the Givens matrix, and `sin` is\nthe sine.",null,null],[10,"rot","","",16,{"inputs":[{"name":"rot"},{"name":"v"},{"name":"w"},{"name":"self"},{"name":"self"}],"output":null}],[11,"copy","","",17,{"inputs":[{"name":"complex32"},{"name":"v"},{"name":"w"}],"output":null}],[11,"copy_mat","","",17,{"inputs":[{"name":"complex32"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"copy","","",18,{"inputs":[{"name":"complex64"},{"name":"v"},{"name":"w"}],"output":null}],[11,"copy_mat","","",18,{"inputs":[{"name":"complex64"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"axpy","","",17,{"inputs":[{"name":"complex32"},{"name":"complex32"},{"name":"v"},{"name":"w"}],"output":null}],[11,"axpy_mat","","",17,{"inputs":[{"name":"complex32"},{"name":"complex32"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"axpy","","",18,{"inputs":[{"name":"complex64"},{"name":"complex64"},{"name":"v"},{"name":"w"}],"output":null}],[11,"axpy_mat","","",18,{"inputs":[{"name":"complex64"},{"name":"complex64"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"scal","","",17,{"inputs":[{"name":"complex32"},{"name":"complex32"},{"name":"v"}],"output":null}],[11,"scal_mat","","",17,{"inputs":[{"name":"complex32"},{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"scal","","",18,{"inputs":[{"name":"complex64"},{"name":"complex64"},{"name":"v"}],"output":null}],[11,"scal_mat","","",18,{"inputs":[{"name":"complex64"},{"name":"complex64"},{"name":"matrix"}],"output":null}],[11,"swap","","",17,{"inputs":[{"name":"complex32"},{"name":"v"},{"name":"w"}],"output":null}],[11,"swap","","",18,{"inputs":[{"name":"complex64"},{"name":"v"},{"name":"w"}],"output":null}],[11,"dot","","",17,{"inputs":[{"name":"complex32"},{"name":"v"},{"name":"w"}],"output":{"name":"complex32"}}],[11,"dot","","",18,{"inputs":[{"name":"complex64"},{"name":"v"},{"name":"w"}],"output":{"name":"complex64"}}],[11,"dotc","","",17,{"inputs":[{"name":"complex32"},{"name":"v"},{"name":"w"}],"output":{"name":"complex32"}}],[11,"dotc","","",18,{"inputs":[{"name":"complex64"},{"name":"v"},{"name":"w"}],"output":{"name":"complex64"}}],[11,"asum","","",17,{"inputs":[{"name":"complex32"},{"name":"v"}],"output":{"name":"complex32"}}],[11,"asum","","",18,{"inputs":[{"name":"complex64"},{"name":"v"}],"output":{"name":"complex64"}}],[11,"nrm2","","",17,{"inputs":[{"name":"complex32"},{"name":"v"}],"output":{"name":"complex32"}}],[11,"nrm2","","",18,{"inputs":[{"name":"complex64"},{"name":"v"}],"output":{"name":"complex64"}}],[11,"iamax","","",17,{"inputs":[{"name":"complex32"},{"name":"v"}],"output":{"name":"usize"}}],[11,"iamax","","",18,{"inputs":[{"name":"complex64"},{"name":"v"}],"output":{"name":"usize"}}],[8,"Vector","rblas::vector","Methods that allow a type to be used in BLAS functions as a vector.",null,null],[11,"inc","","The stride within the vector. For example, if `inc` returns 7, every\n7th element is used. Defaults to 1.",19,{"inputs":[{"name":"vector"}],"output":{"name":"i32"}}],[10,"len","","The number of elements in the vector.",19,{"inputs":[{"name":"vector"}],"output":{"name":"i32"}}],[10,"as_ptr","","An unsafe pointer to a contiguous block of memory.",19,null],[10,"as_mut_ptr","","An unsafe mutable pointer to a contiguous block of memory.",19,null],[8,"VectorOperations","","",null,null],[11,"update","","",20,{"inputs":[{"name":"vectoroperations"},{"name":"t"},{"name":"vector"}],"output":{"name":"self"}}],[11,"scale","","",20,{"inputs":[{"name":"vectoroperations"},{"name":"t"}],"output":{"name":"self"}}],[11,"dot","","",20,{"inputs":[{"name":"vectoroperations"},{"name":"vector"}],"output":{"name":"t"}}],[11,"abs_sum","","",20,{"inputs":[{"name":"vectoroperations"}],"output":{"name":"t"}}],[11,"norm","","",20,{"inputs":[{"name":"vectoroperations"}],"output":{"name":"t"}}],[11,"max_index","","",20,{"inputs":[{"name":"vectoroperations"}],"output":{"name":"usize"}}],[11,"len","collections::vec","",21,{"inputs":[{"name":"vec"}],"output":{"name":"i32"}}],[11,"as_ptr","","",21,null],[11,"as_mut_ptr","","",21,null],[0,"matrix_vector","rblas","Matrix-vector operations.",null,null],[0,"ll","rblas::matrix_vector","Bindings for matrix-vector functions.",null,null],[0,"cblas_s","rblas::matrix_vector::ll","",null,null],[5,"cblas_sgemv","rblas::matrix_vector::ll::cblas_s","",null,null],[5,"cblas_ssymv","","",null,null],[5,"cblas_strmv","","",null,null],[5,"cblas_strsv","","",null,null],[5,"cblas_sger","","",null,null],[5,"cblas_ssyr","","",null,null],[5,"cblas_ssyr2","","",null,null],[5,"cblas_sspmv","","",null,null],[5,"cblas_sgbmv","","",null,null],[5,"cblas_ssbmv","","",null,null],[5,"cblas_stbmv","","",null,null],[5,"cblas_stbsv","","",null,null],[5,"cblas_stpmv","","",null,null],[5,"cblas_stpsv","","",null,null],[5,"cblas_sspr","","",null,null],[5,"cblas_sspr2","","",null,null],[0,"cblas_d","rblas::matrix_vector::ll","",null,null],[5,"cblas_dgemv","rblas::matrix_vector::ll::cblas_d","",null,null],[5,"cblas_dsymv","","",null,null],[5,"cblas_dtrmv","","",null,null],[5,"cblas_dtrsv","","",null,null],[5,"cblas_dger","","",null,null],[5,"cblas_dsyr","","",null,null],[5,"cblas_dsyr2","","",null,null],[5,"cblas_dspmv","","",null,null],[5,"cblas_dgbmv","","",null,null],[5,"cblas_dsbmv","","",null,null],[5,"cblas_dtbmv","","",null,null],[5,"cblas_dtbsv","","",null,null],[5,"cblas_dtpmv","","",null,null],[5,"cblas_dtpsv","","",null,null],[5,"cblas_dspr","","",null,null],[5,"cblas_dspr2","","",null,null],[0,"cblas_c","rblas::matrix_vector::ll","",null,null],[5,"cblas_cgemv","rblas::matrix_vector::ll::cblas_c","",null,null],[5,"cblas_csymv","","",null,null],[5,"cblas_chemv","","",null,null],[5,"cblas_ctrmv","","",null,null],[5,"cblas_ctrsv","","",null,null],[5,"cblas_cgeru","","",null,null],[5,"cblas_cgerc","","",null,null],[5,"cblas_cher","","",null,null],[5,"cblas_cher2","","",null,null],[5,"cblas_cgbmv","","",null,null],[5,"cblas_chbmv","","",null,null],[5,"cblas_ctbmv","","",null,null],[5,"cblas_ctbsv","","",null,null],[5,"cblas_chpmv","","",null,null],[5,"cblas_ctpmv","","",null,null],[5,"cblas_ctpsv","","",null,null],[5,"cblas_chpr","","",null,null],[5,"cblas_chpr2","","",null,null],[0,"cblas_z","rblas::matrix_vector::ll","",null,null],[5,"cblas_zgemv","rblas::matrix_vector::ll::cblas_z","",null,null],[5,"cblas_zsymv","","",null,null],[5,"cblas_zhemv","","",null,null],[5,"cblas_ztrmv","","",null,null],[5,"cblas_ztrsv","","",null,null],[5,"cblas_zgeru","","",null,null],[5,"cblas_zgerc","","",null,null],[5,"cblas_zher","","",null,null],[5,"cblas_zher2","","",null,null],[5,"cblas_zgbmv","","",null,null],[5,"cblas_zhbmv","","",null,null],[5,"cblas_ztbmv","","",null,null],[5,"cblas_ztbsv","","",null,null],[5,"cblas_zhpmv","","",null,null],[5,"cblas_ztpmv","","",null,null],[5,"cblas_ztpsv","","",null,null],[5,"cblas_zhpr","","",null,null],[5,"cblas_zhpr2","","",null,null],[0,"ops","rblas::matrix_vector","Wrappers for matrix-vector functions.",null,null],[8,"Gemv","rblas::matrix_vector::ops","",null,null],[10,"gemv","","",22,{"inputs":[{"name":"gemv"},{"name":"transpose"},{"name":"self"},{"name":"matrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Symv","","",null,null],[10,"symv","","",23,{"inputs":[{"name":"symv"},{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Hemv","","",null,null],[10,"hemv","","",24,{"inputs":[{"name":"hemv"},{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Ger","","",null,null],[10,"ger","","",25,{"inputs":[{"name":"ger"},{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[8,"Gerc","","",null,null],[11,"gerc","","",26,{"inputs":[{"name":"gerc"},{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[8,"Syr","","",null,null],[10,"syr","","",27,{"inputs":[{"name":"syr"},{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"matrix"}],"output":null}],[8,"Her","","",null,null],[10,"her","","",28,{"inputs":[{"name":"her"},{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"matrix"}],"output":null}],[8,"Syr2","","",null,null],[10,"syr2","","",29,{"inputs":[{"name":"syr2"},{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[8,"Her2","","",null,null],[10,"her2","","",30,{"inputs":[{"name":"her2"},{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[8,"Gbmv","","",null,null],[10,"gbmv","","",31,{"inputs":[{"name":"gbmv"},{"name":"transpose"},{"name":"self"},{"name":"bandmatrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Sbmv","","",null,null],[10,"sbmv","","",32,{"inputs":[{"name":"sbmv"},{"name":"symmetry"},{"name":"self"},{"name":"bandmatrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Hbmv","","",null,null],[10,"hbmv","","",33,{"inputs":[{"name":"hbmv"},{"name":"symmetry"},{"name":"self"},{"name":"bandmatrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Tbmv","","",null,null],[10,"tbmv","","",34,{"inputs":[{"name":"tbmv"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[8,"Tbsv","","",null,null],[10,"tbsv","","",35,{"inputs":[{"name":"tbsv"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[8,"Spmv","","",null,null],[10,"spmv","","",36,{"inputs":[{"name":"spmv"},{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Hpmv","","",null,null],[10,"hpmv","","",37,{"inputs":[{"name":"hpmv"},{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Tpmv","","",null,null],[10,"tpmv","","",38,{"inputs":[{"name":"tpmv"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[8,"Tpsv","","",null,null],[10,"tpsv","","",39,{"inputs":[{"name":"tpsv"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[8,"Hpr","","",null,null],[10,"hpr","","",40,{"inputs":[{"name":"hpr"},{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"matrix"}],"output":null}],[8,"Spr","","",null,null],[10,"spr","","",41,{"inputs":[{"name":"spr"},{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"matrix"}],"output":null}],[8,"Spr2","","",null,null],[10,"spr2","","",42,{"inputs":[{"name":"spr2"},{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[8,"Hpr2","","",null,null],[10,"hpr2","","",43,{"inputs":[{"name":"hpr2"},{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"gemv","","",17,{"inputs":[{"name":"complex32"},{"name":"transpose"},{"name":"complex32"},{"name":"matrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"gemv","","",18,{"inputs":[{"name":"complex64"},{"name":"transpose"},{"name":"complex64"},{"name":"matrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"symv","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"complex32"},{"name":"matrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"symv","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"complex64"},{"name":"matrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"hemv","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"complex32"},{"name":"matrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"hemv","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"complex64"},{"name":"matrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"ger","","",17,{"inputs":[{"name":"complex32"},{"name":"complex32"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"ger","","",18,{"inputs":[{"name":"complex64"},{"name":"complex64"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"gerc","","",17,{"inputs":[{"name":"complex32"},{"name":"complex32"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"gerc","","",18,{"inputs":[{"name":"complex64"},{"name":"complex64"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"her2","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"complex32"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"her2","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"complex64"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"gbmv","","",17,{"inputs":[{"name":"complex32"},{"name":"transpose"},{"name":"complex32"},{"name":"bandmatrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"gbmv","","",18,{"inputs":[{"name":"complex64"},{"name":"transpose"},{"name":"complex64"},{"name":"bandmatrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"hbmv","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"complex32"},{"name":"bandmatrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"hbmv","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"complex64"},{"name":"bandmatrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"tbmv","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[11,"tbmv","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[11,"tbsv","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[11,"tbsv","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[11,"hpmv","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"complex32"},{"name":"matrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"hpmv","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"complex64"},{"name":"matrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"tpmv","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[11,"tpmv","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[11,"tpsv","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[11,"tpsv","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[11,"hpr2","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"complex32"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"hpr2","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"complex64"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[0,"matrix","rblas","Matrix operations.",null,null],[0,"ll","rblas::matrix","Bindings for matrix functions.",null,null],[0,"cblas_s","rblas::matrix::ll","",null,null],[5,"cblas_sgemm","rblas::matrix::ll::cblas_s","",null,null],[5,"cblas_ssymm","","",null,null],[5,"cblas_strmm","","",null,null],[5,"cblas_strsm","","",null,null],[5,"cblas_ssyrk","","",null,null],[5,"cblas_ssyr2k","","",null,null],[0,"cblas_d","rblas::matrix::ll","",null,null],[5,"cblas_dgemm","rblas::matrix::ll::cblas_d","",null,null],[5,"cblas_dsymm","","",null,null],[5,"cblas_dtrmm","","",null,null],[5,"cblas_dtrsm","","",null,null],[5,"cblas_dsyrk","","",null,null],[5,"cblas_dsyr2k","","",null,null],[0,"cblas_c","rblas::matrix::ll","",null,null],[5,"cblas_cgemm","rblas::matrix::ll::cblas_c","",null,null],[5,"cblas_csymm","","",null,null],[5,"cblas_chemm","","",null,null],[5,"cblas_ctrmm","","",null,null],[5,"cblas_ctrsm","","",null,null],[5,"cblas_cherk","","",null,null],[5,"cblas_cher2k","","",null,null],[5,"cblas_csyrk","","",null,null],[5,"cblas_csyr2k","","",null,null],[0,"cblas_z","rblas::matrix::ll","",null,null],[5,"cblas_zgemm","rblas::matrix::ll::cblas_z","",null,null],[5,"cblas_zsymm","","",null,null],[5,"cblas_zhemm","","",null,null],[5,"cblas_ztrmm","","",null,null],[5,"cblas_ztrsm","","",null,null],[5,"cblas_zherk","","",null,null],[5,"cblas_zher2k","","",null,null],[5,"cblas_zsyrk","","",null,null],[5,"cblas_zsyr2k","","",null,null],[0,"ops","rblas::matrix","Wrappers for matrix functions.",null,null],[8,"Gemm","rblas::matrix::ops","",null,null],[10,"gemm","","",44,{"inputs":[{"name":"gemm"},{"name":"self"},{"name":"transpose"},{"name":"matrix"},{"name":"transpose"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Symm","","",null,null],[10,"symm","","",45,{"inputs":[{"name":"symm"},{"name":"side"},{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Hemm","","",null,null],[10,"hemm","","",46,{"inputs":[{"name":"hemm"},{"name":"side"},{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Trmm","","",null,null],[10,"trmm","","",47,{"inputs":[{"name":"trmm"},{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[8,"Trsm","","",null,null],[10,"trsm","","",48,{"inputs":[{"name":"trsm"},{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[8,"Herk","","",null,null],[10,"herk","","",49,{"inputs":[{"name":"herk"},{"name":"symmetry"},{"name":"transpose"},{"name":"self"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Her2k","","",null,null],[10,"her2k","","",50,{"inputs":[{"name":"her2k"},{"name":"symmetry"},{"name":"transpose"},{"name":"complex"},{"name":"matrix"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Syrk","","",null,null],[10,"syrk","","",51,{"inputs":[{"name":"syrk"},{"name":"symmetry"},{"name":"transpose"},{"name":"self"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Syr2k","","",null,null],[10,"syr2k","","",52,{"inputs":[{"name":"syr2k"},{"name":"symmetry"},{"name":"transpose"},{"name":"self"},{"name":"matrix"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[11,"gemm","","",17,{"inputs":[{"name":"complex32"},{"name":"complex32"},{"name":"transpose"},{"name":"matrix"},{"name":"transpose"},{"name":"matrix"},{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"gemm","","",18,{"inputs":[{"name":"complex64"},{"name":"complex64"},{"name":"transpose"},{"name":"matrix"},{"name":"transpose"},{"name":"matrix"},{"name":"complex64"},{"name":"matrix"}],"output":null}],[11,"symm","","",17,{"inputs":[{"name":"complex32"},{"name":"side"},{"name":"symmetry"},{"name":"complex32"},{"name":"matrix"},{"name":"matrix"},{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"symm","","",18,{"inputs":[{"name":"complex64"},{"name":"side"},{"name":"symmetry"},{"name":"complex64"},{"name":"matrix"},{"name":"matrix"},{"name":"complex64"},{"name":"matrix"}],"output":null}],[11,"hemm","","",17,{"inputs":[{"name":"complex32"},{"name":"side"},{"name":"symmetry"},{"name":"complex32"},{"name":"matrix"},{"name":"matrix"},{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"hemm","","",18,{"inputs":[{"name":"complex64"},{"name":"side"},{"name":"symmetry"},{"name":"complex64"},{"name":"matrix"},{"name":"matrix"},{"name":"complex64"},{"name":"matrix"}],"output":null}],[11,"trmm","","",17,{"inputs":[{"name":"complex32"},{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"complex32"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"trmm","","",18,{"inputs":[{"name":"complex64"},{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"complex64"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"trsm","","",17,{"inputs":[{"name":"complex32"},{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"complex32"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"trsm","","",18,{"inputs":[{"name":"complex64"},{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"complex64"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"syrk","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"transpose"},{"name":"complex32"},{"name":"matrix"},{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"syr2k","","",17,{"inputs":[{"name":"complex32"},{"name":"symmetry"},{"name":"transpose"},{"name":"complex32"},{"name":"matrix"},{"name":"matrix"},{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"syrk","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"transpose"},{"name":"complex64"},{"name":"matrix"},{"name":"complex64"},{"name":"matrix"}],"output":null}],[11,"syr2k","","",18,{"inputs":[{"name":"complex64"},{"name":"symmetry"},{"name":"transpose"},{"name":"complex64"},{"name":"matrix"},{"name":"matrix"},{"name":"complex64"},{"name":"matrix"}],"output":null}],[8,"Matrix","rblas::matrix","Methods that allow a type to be used in BLAS functions as a matrix.",null,null],[11,"lead_dim","","The leading dimension of the matrix. Defaults to `cols` for `RowMajor`\norder and 'rows' for `ColMajor` order.",53,{"inputs":[{"name":"matrix"}],"output":{"name":"i32"}}],[11,"order","","The order of the matrix. Defaults to `RowMajor`.",53,{"inputs":[{"name":"matrix"}],"output":{"name":"order"}}],[10,"rows","","Returns the number of rows.",53,{"inputs":[{"name":"matrix"}],"output":{"name":"i32"}}],[10,"cols","","Returns the number of columns.",53,{"inputs":[{"name":"matrix"}],"output":{"name":"i32"}}],[10,"as_ptr","","An unsafe pointer to a contiguous block of memory.",53,null],[10,"as_mut_ptr","","An unsafe pointer to a contiguous block of memory.",53,null],[8,"BandMatrix","","",null,null],[10,"sub_diagonals","","",54,{"inputs":[{"name":"bandmatrix"}],"output":{"name":"i32"}}],[10,"sup_diagonals","","",54,{"inputs":[{"name":"bandmatrix"}],"output":{"name":"i32"}}],[0,"math","rblas","",null,null],[4,"Trans","rblas::math","",null,null],[13,"T","","",55,null],[13,"H","","",55,null],[4,"Marker","","",null,null],[13,"T","","",56,null],[13,"H","","",56,null],[0,"mat","","",null,null],[3,"Mat","rblas::math::mat","",null,null],[11,"eq","","",57,{"inputs":[{"name":"mat"},{"name":"mat"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"mat"},{"name":"mat"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"mat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",57,{"inputs":[{"name":"mat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"mat"}}],[11,"rows","","",57,{"inputs":[{"name":"mat"}],"output":{"name":"usize"}}],[11,"cols","","",57,{"inputs":[{"name":"mat"}],"output":{"name":"usize"}}],[11,"set_rows","","",57,{"inputs":[{"name":"mat"},{"name":"usize"}],"output":null}],[11,"set_cols","","",57,{"inputs":[{"name":"mat"},{"name":"usize"}],"output":null}],[11,"push","","",57,{"inputs":[{"name":"mat"},{"name":"t"}],"output":null}],[11,"fill","","",57,{"inputs":[{"name":"mat"},{"name":"t"},{"name":"usize"},{"name":"usize"}],"output":{"name":"mat"}}],[11,"index","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"mat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rows","","",57,{"inputs":[{"name":"mat"}],"output":{"name":"i32"}}],[11,"cols","","",57,{"inputs":[{"name":"mat"}],"output":{"name":"i32"}}],[11,"as_ptr","","",57,null],[11,"as_mut_ptr","","",57,null],[11,"from","","",57,{"inputs":[{"name":"mat"},{"name":"matrix"}],"output":{"name":"mat"}}],[0,"vector","rblas::math","",null,null],[11,"mul","","",55,{"inputs":[{"name":"trans"},{"name":"vector"}],"output":{"name":"t"}}],[11,"mul","rblas::math::vector","",17,{"inputs":[{"name":"complex32"},{"name":"vector"}],"output":{"name":"vec"}}],[11,"mul","","",18,{"inputs":[{"name":"complex64"},{"name":"vector"}],"output":{"name":"vec"}}],[0,"matrix_vector","rblas::math","",null,null],[0,"matrix","","",null,null],[11,"mul","rblas::math::matrix","",17,{"inputs":[{"name":"complex32"},{"name":"matrix"}],"output":{"name":"mat"}}],[11,"mul","","",18,{"inputs":[{"name":"complex64"},{"name":"matrix"}],"output":{"name":"mat"}}],[11,"mul","rblas::math","",55,{"inputs":[{"name":"trans"},{"name":"matrix"}],"output":{"name":"mat"}}],[11,"mul","","",55,{"inputs":[{"name":"trans"},{"name":"trans"}],"output":{"name":"mat"}}],[11,"deref","","",55,{"inputs":[{"name":"trans"}],"output":{"name":"a"}}],[14,"mat!","rblas","",null,null]],"paths":[[4,"Order"],[4,"Transpose"],[4,"Symmetry"],[4,"Diagonal"],[4,"Side"],[8,"Default"],[3,"Complex"],[8,"Copy"],[8,"Axpy"],[8,"Scal"],[8,"Swap"],[8,"Dot"],[8,"Dotc"],[8,"Asum"],[8,"Nrm2"],[8,"Iamax"],[8,"Rot"],[6,"Complex32"],[6,"Complex64"],[8,"Vector"],[8,"VectorOperations"],[3,"Vec"],[8,"Gemv"],[8,"Symv"],[8,"Hemv"],[8,"Ger"],[8,"Gerc"],[8,"Syr"],[8,"Her"],[8,"Syr2"],[8,"Her2"],[8,"Gbmv"],[8,"Sbmv"],[8,"Hbmv"],[8,"Tbmv"],[8,"Tbsv"],[8,"Spmv"],[8,"Hpmv"],[8,"Tpmv"],[8,"Tpsv"],[8,"Hpr"],[8,"Spr"],[8,"Spr2"],[8,"Hpr2"],[8,"Gemm"],[8,"Symm"],[8,"Hemm"],[8,"Trmm"],[8,"Trsm"],[8,"Herk"],[8,"Her2k"],[8,"Syrk"],[8,"Syr2k"],[8,"Matrix"],[8,"BandMatrix"],[4,"Trans"],[4,"Marker"],[3,"Mat"]]};
searchIndex['collenchyma'] = {"items":[[0,"backend","collenchyma","Provides the interface for running parallel computations on one ore many devices.",null,null],[3,"Backend","collenchyma::backend","Defines the main and highest struct of Collenchyma.",null,null],[3,"BackendConfig","","Provides Backend Configuration.",null,null],[8,"IBackend","","Describes a Backend.",null,null],[16,"F","","Represents the Framework of a Backend.",0,null],[10,"device","","Returns the backend device.",0,{"inputs":[{"name":"ibackend"}],"output":{"name":"devicetype"}}],[11,"default","","Try to create a default backend.",0,{"inputs":[{"name":"ibackend"}],"output":{"name":"result"}}],[11,"synchronize","","Synchronize backend.",0,{"inputs":[{"name":"ibackend"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"backend"}],"output":{"name":"backend"}}],[11,"fmt","","",1,{"inputs":[{"name":"backend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initialize a new native Backend from a BackendConfig.",1,{"inputs":[{"name":"backend"},{"name":"backendconfig"}],"output":{"name":"result"}}],[11,"hardwares","","Returns the available hardware.",1,null],[11,"framework","","Returns the backend framework.",1,{"inputs":[{"name":"backend"}],"output":{"name":"box"}}],[11,"device","","Returns the backend device.",1,{"inputs":[{"name":"backend"}],"output":{"name":"devicetype"}}],[11,"clone","","",2,{"inputs":[{"name":"backendconfig"}],"output":{"name":"backendconfig"}}],[11,"fmt","","",2,{"inputs":[{"name":"backendconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new BackendConfig.",2,null],[0,"device","collenchyma","Provides a representation for one or many ready to use hardwares.",null,null],[4,"DeviceType","collenchyma::device","Container for all known IDevice implementations",null,null],[13,"Native","","A native CPU",3,null],[4,"Error","","Defines a generic set of Memory Errors.",null,null],[13,"Native","","Failures related to the Native framework implementation.",4,null],[8,"IDevice","","Specifies Hardware behavior across frameworks.",null,null],[16,"H","","The Hardware representation for this Device.",5,null],[16,"M","","The Memory representation for this Device.",5,null],[10,"id","","Returns the unique identifier of the Device.",5,{"inputs":[{"name":"idevice"}],"output":{"name":"isize"}}],[10,"hardwares","","Returns the hardwares, which define the Device.",5,{"inputs":[{"name":"idevice"}],"output":{"name":"vec"}}],[10,"alloc_memory","","Allocate memory on the Device.",5,{"inputs":[{"name":"idevice"},{"name":"usize"}],"output":{"name":"result"}}],[10,"sync_in","","Synchronize memory from `source_data` to the memory at `dest_data`.",5,{"inputs":[{"name":"idevice"},{"name":"devicetype"},{"name":"memorytype"},{"name":"m"}],"output":{"name":"result"}}],[8,"IDeviceSyncOut","","Specifies Sync out behavior across frameworks.",null,null],[16,"M","","The Memory representation for this Device.",6,null],[10,"sync_out","","Synchronizes memory from `source_data` to `dest_data`.",6,{"inputs":[{"name":"idevicesyncout"},{"name":"m"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"devicetype"}],"output":{"name":"devicetype"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"devicetype"},{"name":"devicetype"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"devicetype"},{"name":"devicetype"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"devicetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"error"},{"name":"nativeerror"}],"output":{"name":"error"}}],[0,"hardware","collenchyma","Provides a representation for a collection of available compute units e.g. CPUs or GPUs.",null,null],[4,"HardwareType","collenchyma::hardware","Specifies the available Hardware types.",null,null],[13,"CPU","","CPU devices",7,null],[13,"GPU","","GPU devices",7,null],[13,"ACCELERATOR","","Hardware Accelerator devices",7,null],[13,"OTHER","","Used for anything else",7,null],[8,"IHardware","","Specifies Hardware behavior accross frameworks.",null,null],[10,"id","","Returns the ID of the Hardware",8,{"inputs":[{"name":"ihardware"}],"output":{"name":"isize"}}],[10,"name","","Returns the name of the Hardware",8,{"inputs":[{"name":"ihardware"}],"output":{"name":"option"}}],[10,"set_name","","Defines the name of the Hardware",8,{"inputs":[{"name":"ihardware"},{"name":"option"}],"output":{"name":"self"}}],[10,"hardware_type","","Returns the device_type of the Hardware",8,{"inputs":[{"name":"ihardware"}],"output":{"name":"option"}}],[10,"set_hardware_type","","Defines the hardware_type of the Hardware",8,{"inputs":[{"name":"ihardware"},{"name":"option"}],"output":{"name":"self"}}],[10,"compute_units","","Returns the compute_units of the Hardware",8,{"inputs":[{"name":"ihardware"}],"output":{"name":"option"}}],[10,"set_compute_units","","Defines the compute_units of the Hardware",8,{"inputs":[{"name":"ihardware"},{"name":"option"}],"output":{"name":"self"}}],[10,"build","","Build an inmutable Hardware",8,{"inputs":[{"name":"ihardware"}],"output":{"name":"self"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"hardwaretype"},{"name":"hardwaretype"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"hardwaretype"},{"name":"hardwaretype"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"hardwaretype"}],"output":{"name":"hardwaretype"}}],[11,"fmt","","",7,{"inputs":[{"name":"hardwaretype"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"framework","collenchyma","Provides the generic functionality of a hardware supporting frameworks such as native CPU, OpenCL,\nCUDA, etc..\n[hardware]: ../hardware/index.html",null,null],[4,"Error","collenchyma::framework","Defines a generic set of Framework Errors.",null,null],[13,"Implementation","","Failure related to the Collenchyma implementation of a specific Framework.",9,null],[8,"IFramework","","Defines a Framework.",null,null],[16,"H","","The Hardware representation for this Framework.",10,null],[16,"D","","The Device representation for this Framework.",10,null],[16,"B","","The Binary representation for this Framework.",10,null],[10,"ID","","Defines the Framework by a Name.",10,{"inputs":[{"name":"iframework"}],"output":{"name":"str"}}],[10,"new","","Initializes a new Framework.",10,{"inputs":[{"name":"iframework"}],"output":{"name":"self"}}],[10,"load_hardwares","","Initializes all the available hardwares.",10,{"inputs":[{"name":"iframework"}],"output":{"name":"result"}}],[10,"hardwares","","Returns the cached and available hardwares.",10,null],[10,"binary","","Returns the initialized binary.",10,{"inputs":[{"name":"iframework"}],"output":{"name":"b"}}],[10,"new_device","","Initializes a new Device from the provided hardwares.",10,null],[11,"fmt","","",9,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[0,"frameworks","collenchyma","Exposes the specific Framework implementations.",null,null],[0,"native","collenchyma::frameworks","Provides informations about the software system, such as OpenCL, CUDA, that contains the set of\ncomponents to support [hardwares][hardware] with kernel execution.\n[hardware]: ../hardware/index.html",null,null],[3,"Native","collenchyma::frameworks::native","Provides the Native framework.",null,null],[4,"Error","","Defines the Native Error.",null,null],[13,"Memory","","Failure related to allocation, syncing memory",11,null],[5,"allocate_boxed_slice","","Traditional allocation via creation of a filled Vec.",null,{"inputs":[{"name":"usize"}],"output":{"name":"box"}}],[0,"device","","Provides a hardware aka. the host CPU.",null,null],[3,"Cpu","collenchyma::frameworks::native::device","Defines the host CPU Hardware.",null,null],[11,"clone","","",12,{"inputs":[{"name":"cpu"}],"output":{"name":"cpu"}}],[11,"fmt","","",12,{"inputs":[{"name":"cpu"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new OpenCL hardware.",12,{"inputs":[{"name":"cpu"},{"name":"vec"}],"output":{"name":"cpu"}}],[11,"id","","",12,{"inputs":[{"name":"cpu"}],"output":{"name":"isize"}}],[11,"hardwares","","",12,{"inputs":[{"name":"cpu"}],"output":{"name":"vec"}}],[11,"alloc_memory","","",12,{"inputs":[{"name":"cpu"},{"name":"usize"}],"output":{"name":"result"}}],[11,"sync_in","","",12,{"inputs":[{"name":"cpu"},{"name":"devicetype"},{"name":"memorytype"},{"name":"flatbox"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"cpu"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",12,{"inputs":[{"name":"cpu"},{"name":"h"}],"output":null}],[0,"flatbox","collenchyma::frameworks::native","Provides a Box without any knowledge of its underlying type.",null,null],[3,"FlatBox","collenchyma::frameworks::native::flatbox","A Box without any knowledge of its underlying type.",null,null],[11,"from_box","","Create FlatBox from Box, consuming it.",13,{"inputs":[{"name":"flatbox"},{"name":"box"}],"output":{"name":"flatbox"}}],[11,"as_slice","","Access memory as slice.",13,null],[11,"as_mut_slice","","Access memory as mutable slice.",13,null],[11,"byte_size","","Returns memory size of the Flatbox.",13,{"inputs":[{"name":"flatbox"}],"output":{"name":"usize"}}],[11,"drop","","",13,{"inputs":[{"name":"flatbox"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"flatbox"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hardware","collenchyma::frameworks::native","Provides a hardware aka. the host CPU.",null,null],[3,"Hardware","collenchyma::frameworks::native::hardware","Defines the host CPU Hardware.",null,null],[11,"clone","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"hardware"}}],[11,"fmt","","",14,{"inputs":[{"name":"hardware"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"self"}}],[11,"new","","Initializes a new OpenCL hardware.",14,{"inputs":[{"name":"hardware"},{"name":"isize"}],"output":{"name":"hardware"}}],[11,"id","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"isize"}}],[11,"name","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"option"}}],[11,"set_name","","",14,{"inputs":[{"name":"hardware"},{"name":"option"}],"output":{"name":"self"}}],[11,"hardware_type","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"option"}}],[11,"set_hardware_type","","",14,{"inputs":[{"name":"hardware"},{"name":"option"}],"output":{"name":"self"}}],[11,"compute_units","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"option"}}],[11,"set_compute_units","","",14,{"inputs":[{"name":"hardware"},{"name":"option"}],"output":{"name":"self"}}],[11,"build","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"hardware"}}],[0,"function","collenchyma::frameworks::native","Provides a operation on native CPU.",null,null],[3,"Function","collenchyma::frameworks::native::function","Defines a host CPU operation.",null,null],[11,"clone","","",15,{"inputs":[{"name":"function"}],"output":{"name":"function"}}],[11,"fmt","","",15,{"inputs":[{"name":"function"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a native CPU hardware.",15,{"inputs":[{"name":"function"}],"output":{"name":"function"}}],[0,"binary","collenchyma::frameworks::native","Provides a binary on native CPU.",null,null],[3,"Binary","collenchyma::frameworks::native::binary","Defines a host CPU binary.",null,null],[11,"clone","","",16,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"fmt","","",16,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes the native CPU binary.",16,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"clone","collenchyma::frameworks::native","",11,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",11,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",11,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[8,"INative","","Provides the Native framework trait for explicit Backend behaviour.",null,null],[11,"clone","","",17,{"inputs":[{"name":"native"}],"output":{"name":"native"}}],[11,"fmt","","",17,{"inputs":[{"name":"native"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ID","","",17,{"inputs":[{"name":"native"}],"output":{"name":"str"}}],[11,"new","","",17,{"inputs":[{"name":"native"}],"output":{"name":"native"}}],[11,"load_hardwares","","",17,{"inputs":[{"name":"native"}],"output":{"name":"result"}}],[11,"hardwares","","",17,null],[11,"binary","","",17,{"inputs":[{"name":"native"}],"output":{"name":"binary"}}],[11,"new_device","","",17,null],[11,"device","collenchyma::backend","",1,{"inputs":[{"name":"backend"}],"output":{"name":"devicetype"}}],[0,"memory","collenchyma","Provides a representation for memory across different frameworks.",null,null],[4,"MemoryType","collenchyma::memory","Container for all known IMemory implementations",null,null],[13,"Native","","A Native Memory representation.",18,null],[8,"IMemory","","Specifies Memory behavior accross frameworks.",null,null],[11,"fmt","","",18,{"inputs":[{"name":"memorytype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_native","","Extract the FlatBox if MemoryType is Native.",18,{"inputs":[{"name":"memorytype"}],"output":{"name":"option"}}],[11,"as_mut_native","","Extract the FlatBox mutably if MemoryType is Native.",18,{"inputs":[{"name":"memorytype"}],"output":{"name":"option"}}],[11,"into_native","","Consumes the Memory and returns an owned OpenCL Memory.",18,{"inputs":[{"name":"memorytype"}],"output":{"name":"option"}}],[0,"tensor","collenchyma","Provides the functionality for memory management across devices.",null,null],[3,"SharedTensor","collenchyma::tensor","Container that handles synchronization of [Memory][1] of type `T`.\n[1]: ../memory/index.html",null,null],[4,"Error","","Errors than can occur when synchronizing memory.",null,null],[13,"MissingSource","","No copy on source device.",19,null],[13,"MissingDestination","","No copy on destination device.",19,null],[13,"InvalidMemory","","No valid MemoryType provided. Other than expected.",19,null],[13,"InvalidMemoryAllocation","","No memory allocation on specified device happened.",19,null],[13,"InvalidRemove","","Unable to remove Memory copy from SharedTensor.",19,null],[13,"MemoryAllocationError","","Framework error at memory allocation.",19,null],[13,"MemorySynchronizationError","","Framework error at memory synchronization.",19,null],[13,"InvalidShape","","Shape provided for reshaping is not compatible with old shape.",19,null],[6,"TensorDesc","","Describes the Descriptor of a SharedTensor.",null,null],[8,"ITensorDesc","","Describes the Descriptor of a Tensor.",null,null],[10,"rank","","Returns the rank of the Tensor.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"usize"}}],[10,"size","","Returns the summed up length of all dimensions of the Tensor.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"usize"}}],[10,"dims","","Returns the dimensions of the Tensor.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"vec"}}],[10,"dims_i32","","Returns the dimensions of the Tensor as Vec<i32>.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"vec"}}],[11,"default_stride","","Returns the default stride for an Rust allocated Tensor.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"vec"}}],[11,"default_stride_i32","","Returns the default stride for a Rust allocated Tensor as i32.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"vec"}}],[8,"IntoTensorDesc","","Describes a conversion into a Tensor Descriptor.",null,null],[10,"into","","Converts the implemented type into a TensorDesc.",21,{"inputs":[{"name":"intotensordesc"}],"output":{"name":"tensordesc"}}],[11,"fmt","","",22,{"inputs":[{"name":"sharedtensor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","collections::vec","",23,{"inputs":[{"name":"vec"}],"output":{"name":"tensordesc"}}],[11,"rank","collenchyma::tensor","",24,{"inputs":[{"name":"tensordesc"}],"output":{"name":"usize"}}],[11,"size","","",24,{"inputs":[{"name":"tensordesc"}],"output":{"name":"usize"}}],[11,"dims","","",24,{"inputs":[{"name":"tensordesc"}],"output":{"name":"vec"}}],[11,"dims_i32","","",24,{"inputs":[{"name":"tensordesc"}],"output":{"name":"vec"}}],[11,"new","","Create new Tensor by allocating [Memory][1] on a Device.\n[1]: ../memory/index.html",22,{"inputs":[{"name":"sharedtensor"},{"name":"devicetype"},{"name":"d"}],"output":{"name":"result"}}],[11,"reshape","","Change the shape of the Tensor.",22,{"inputs":[{"name":"sharedtensor"},{"name":"d"}],"output":{"name":"result"}}],[11,"resize","","Change the size and shape of the Tensor.",22,{"inputs":[{"name":"sharedtensor"},{"name":"d"}],"output":{"name":"result"}}],[11,"sync","","Synchronize memory from latest location to `destination`.",22,{"inputs":[{"name":"sharedtensor"},{"name":"devicetype"}],"output":{"name":"result"}}],[11,"get","","Get a reference to the memory copy on the provided `device`.",22,{"inputs":[{"name":"sharedtensor"},{"name":"devicetype"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the memory copy on the provided `device`.",22,{"inputs":[{"name":"sharedtensor"},{"name":"devicetype"}],"output":{"name":"option"}}],[11,"remove_copy","","Removes Copy from SharedTensor and therefore aquires ownership over the removed memory copy for synchronizing.",22,{"inputs":[{"name":"sharedtensor"},{"name":"devicetype"}],"output":{"name":"result"}}],[11,"add_device","","Track a new `device` and allocate memory on it.",22,{"inputs":[{"name":"sharedtensor"},{"name":"devicetype"}],"output":{"name":"result"}}],[11,"latest_device","","Returns the device that contains the up-to-date memory copy.",22,{"inputs":[{"name":"sharedtensor"}],"output":{"name":"devicetype"}}],[11,"capacity","","Returns the number of elements for which the Tensor has been allocated.",22,{"inputs":[{"name":"sharedtensor"}],"output":{"name":"usize"}}],[11,"desc","","Returns the descriptor of the Tensor.",22,{"inputs":[{"name":"sharedtensor"}],"output":{"name":"tensordesc"}}],[11,"mem_size","","Returns the allocated Memory size in bytes.",22,{"inputs":[{"name":"sharedtensor"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"clone","","",19,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",19,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",19,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",19,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[0,"operation","collenchyma","Provides the generic functionality for backend-agnostic operations.",null,null],[8,"IOperation","collenchyma::operation","Defines the functionality of an operation.",null,null],[0,"binary","collenchyma","Provides the generic functionality for a backend-specific implementation of a\n[library][libraries].\n[libraries]: ../libraries/index.html",null,null],[8,"IBinary","collenchyma::binary","Defines the functionality for turning a library into backend-specific, executable operations.",null,null],[0,"error","collenchyma","Defines the general set of error types in Collenchyma.",null,null],[4,"Error","collenchyma::error","Defines the set of available Collenchyma error types.",null,null],[13,"Framework","","Failure related to the Framework implementation.",25,null],[13,"Tensor","","Failure related to the Tensor.",25,null],[13,"Plugin","","Failure at Plugin Operation.",25,null],[13,"Device","","Failure related to a Device.",25,null],[11,"fmt","","",25,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",25,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",25,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[0,"plugin","collenchyma","Provides helpers for explicit implementations of Backend [Operations][operation].\n[operation]: ../operation/index.html",null,null],[8,"Float","collenchyma::plugin","",null,null],[10,"nan","","Returns the `NaN` value.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",26,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",26,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",26,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",26,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",26,null],[4,"Error","","Defines a high-level Plugin Error.",null,null],[13,"MissingMemoryForDevice","","Failure at receiving the correct device memory from the SharedMemory.",27,null],[13,"Operation","","Failure at the execution of the Operation.",27,null],[13,"Plugin","","Failure at the Plugin.",27,null],[0,"numeric_helpers","","Describes numeric types and traits for a Plugin.",null,null],[11,"clone","","",27,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",27,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",27,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",27,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","collenchyma::error","",25,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[0,"prelude","collenchyma","A module meant to be glob imported when using Collenchyma.",null,null],[11,"from","collenchyma::tensor","",19,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","collenchyma::error","",25,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",25,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}]],"paths":[[8,"IBackend"],[3,"Backend"],[3,"BackendConfig"],[4,"DeviceType"],[4,"Error"],[8,"IDevice"],[8,"IDeviceSyncOut"],[4,"HardwareType"],[8,"IHardware"],[4,"Error"],[8,"IFramework"],[4,"Error"],[3,"Cpu"],[3,"FlatBox"],[3,"Hardware"],[3,"Function"],[3,"Binary"],[3,"Native"],[4,"MemoryType"],[4,"Error"],[8,"ITensorDesc"],[8,"IntoTensorDesc"],[3,"SharedTensor"],[3,"Vec"],[6,"TensorDesc"],[4,"Error"],[8,"Float"],[4,"Error"]]};
searchIndex['enum_primitive'] = {"items":[[11,"is_some","core::option","Returns `true` if the option is a `Some` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",0,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",0,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",1,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"eq","core::num::flt2dec::decoder","",2,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",4,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",4,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",4,null],[11,"clone","","",5,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",5,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",5,null],[11,"fmt","","",6,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",7,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",7,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",8,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,null],[11,"eq","","",10,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",13,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",13,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",13,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",13,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",13,null],[11,"eq","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",13,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",14,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",14,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",14,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",14,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",14,null],[11,"eq","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",14,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",15,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",15,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",15,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",15,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",16,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",17,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",17,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",18,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",19,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",19,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",20,null],[11,"get","","Dereferences the content.",20,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",20,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",21,null],[11,"clone","","",21,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",22,null],[11,"eq","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",22,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",22,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",23,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",23,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",24,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",25,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",26,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",27,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",27,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",28,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",28,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",29,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",30,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",31,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",32,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",33,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",34,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",30,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",30,null],[11,"swap","","Stores a value into the bool, returning the old value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",31,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",31,null],[11,"swap","","Stores a value into the isize, returning the old value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",32,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",32,null],[11,"swap","","Stores a value into the usize, returning the old value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",33,null],[11,"load","","Loads a value from the pointer.",33,null],[11,"store","","Stores a value into the pointer.",33,null],[11,"swap","","Stores a value into the pointer, returning the old value.",33,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",33,null],[11,"fmt","","",32,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",35,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",35,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",35,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",35,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",35,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",35,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",35,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",37,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",37,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",37,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",39,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",39,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",39,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",39,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",40,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",40,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",41,null],[11,"deref","","",40,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",42,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",42,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",42,null],[11,"clone","core::char","",43,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",44,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",43,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"clone","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",46,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"count","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",45,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",47,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",47,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",49,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",49,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",51,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",50,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",53,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"nth","","",56,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",57,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",57,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",58,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",59,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",59,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"clone","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",60,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"clone","","",61,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",61,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",61,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",62,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",62,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",64,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",25,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",24,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"clone","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next","core::ops","",24,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",70,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",70,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",70,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",71,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",71,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",73,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",0,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",75,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",76,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",77,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",77,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",77,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",77,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",77,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",77,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",77,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",77,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",77,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",79,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",77,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",81,null],[11,"next","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"count","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",81,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",82,null],[11,"next","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"count","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",82,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",85,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","","",86,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next","","",87,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next","","",88,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next","","",89,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"count","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",90,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"count","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",91,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"count","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",92,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",93,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",95,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",99,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",100,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",101,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",103,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",103,null],[11,"matching","","",103,null],[11,"use_early_reject","","",104,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",104,null],[11,"matching","","",104,null],[11,"eq","core::str","",105,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",106,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",106,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",106,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",107,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",108,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"count","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",109,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",110,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",111,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",111,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",116,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",117,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",118,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",126,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",126,null],[11,"call_mut","","",126,null],[11,"call_once","","",126,null],[11,"next","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next_back","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",128,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",128,null],[11,"finish","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",130,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",131,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",132,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",133,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",134,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",135,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",136,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",137,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",138,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",138,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",139,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",139,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",139,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",140,null],[11,"entry","","Adds a new entry to the set output.",141,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",141,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",141,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",142,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",142,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",142,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",143,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",143,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",143,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",144,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",145,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",146,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",147,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",148,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",149,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",150,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",151,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",152,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",152,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",153,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",153,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",153,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",153,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",153,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",153,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",153,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",153,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",153,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",22,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",35,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Option","enum_primitive","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive!","","Wrap this macro around an `enum` declaration to get an\nautomatically generated implementation of `num::FromPrimitive`.",null,null]],"paths":[[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"FromPrimitive"]]};
searchIndex['num'] = {"items":[[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"biguint"},{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"bigint"},{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",7,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",7,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7,null],[11,"from_polar","","Convert a polar representation into a complex number.",7,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",9,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",13,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",14,null],[13,"Invalid","","",14,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",15,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",15,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",16,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",16,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",17,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",19,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",19,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",21,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",22,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",23,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",24,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe \"sign bit\" in the most significant bits even for unsigned types.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",25,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",25,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",28,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",29,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",29,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",29,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",29,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",29,null],[11,"fmt","","",13,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",30,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",30,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",30,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",30,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",30,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",30,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",30,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",30,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['rustc_serialize'] = {"items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['rand'] = {"items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['timeit'] = {"items":[[5,"get_time","timeit","A shortcut to time's `get_time` function. This is so that the user of timeit doesn't have to\nseparately add a dependency for the time crate.",null,{"inputs":[],"output":{"name":"timespec"}}],[14,"timeit_loops!","","Runs a block a specified number of times and returns the average time of execution.",null,null],[14,"timeit!","","Runs a block several times and outputs the average time per loop. The number of loops is\ndetermined automatically.",null,null]],"paths":[]};
searchIndex['time'] = {"items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"timespec"},{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",5,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex['log'] = {"items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex['libc'] = {"items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",12,null],[12,"sa_data","","",12,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",13,null],[12,"sin_port","","",13,null],[12,"sin_addr","","",13,null],[12,"sin_zero","","",13,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",14,null],[12,"sin6_port","","",14,null],[12,"sin6_flowinfo","","",14,null],[12,"sin6_addr","","",14,null],[12,"sin6_scope_id","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",16,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",17,null],[12,"ai_family","","",17,null],[12,"ai_socktype","","",17,null],[12,"ai_protocol","","",17,null],[12,"ai_addrlen","","",17,null],[12,"ai_addr","","",17,null],[12,"ai_canonname","","",17,null],[12,"ai_next","","",17,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",18,null],[12,"sll_protocol","","",18,null],[12,"sll_ifindex","","",18,null],[12,"sll_hatype","","",18,null],[12,"sll_pkttype","","",18,null],[12,"sll_halen","","",18,null],[12,"sll_addr","","",18,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",19,null],[12,"tm_min","","",19,null],[12,"tm_hour","","",19,null],[12,"tm_mday","","",19,null],[12,"tm_mon","","",19,null],[12,"tm_year","","",19,null],[12,"tm_wday","","",19,null],[12,"tm_yday","","",19,null],[12,"tm_isdst","","",19,null],[12,"tm_gmtoff","","",19,null],[12,"tm_zone","","",19,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",20,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",21,null],[12,"dli_fbase","","",21,null],[12,"dli_sname","","",21,null],[12,"dli_saddr","","",21,null],[3,"epoll_event","","",null,null],[12,"events","","",22,null],[12,"u64","","",22,null],[3,"utsname","","",null,null],[12,"sysname","","",23,null],[12,"nodename","","",23,null],[12,"release","","",23,null],[12,"version","","",23,null],[12,"machine","","",23,null],[12,"domainname","","",23,null],[3,"dirent","","",null,null],[12,"d_ino","","",24,null],[12,"d_off","","",24,null],[12,"d_reclen","","",24,null],[12,"d_type","","",24,null],[12,"d_name","","",24,null],[3,"dirent64","","",null,null],[12,"d_ino","","",25,null],[12,"d_off","","",25,null],[12,"d_reclen","","",25,null],[12,"d_type","","",25,null],[12,"d_name","","",25,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",26,null],[12,"rlim_max","","",26,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",27,null],[12,"gl_pathv","","",27,null],[12,"gl_offs","","",27,null],[12,"gl_flags","","",27,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",28,null],[12,"ifa_name","","",28,null],[12,"ifa_flags","","",28,null],[12,"ifa_addr","","",28,null],[12,"ifa_netmask","","",28,null],[12,"ifa_ifu","","",28,null],[12,"ifa_data","","",28,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",29,null],[12,"pw_passwd","","",29,null],[12,"pw_uid","","",29,null],[12,"pw_gid","","",29,null],[12,"pw_gecos","","",29,null],[12,"pw_dir","","",29,null],[12,"pw_shell","","",29,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",30,null],[12,"f_frsize","","",30,null],[12,"f_blocks","","",30,null],[12,"f_bfree","","",30,null],[12,"f_bavail","","",30,null],[12,"f_files","","",30,null],[12,"f_ffree","","",30,null],[12,"f_favail","","",30,null],[12,"f_fsid","","",30,null],[12,"f_flag","","",30,null],[12,"f_namemax","","",30,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",31,null],[12,"nl_pid","","",31,null],[12,"nl_groups","","",31,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",32,null],[12,"dqb_bsoftlimit","","",32,null],[12,"dqb_curspace","","",32,null],[12,"dqb_ihardlimit","","",32,null],[12,"dqb_isoftlimit","","",32,null],[12,"dqb_curinodes","","",32,null],[12,"dqb_btime","","",32,null],[12,"dqb_itime","","",32,null],[12,"dqb_valid","","",32,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",33,null],[12,"ssi_errno","","",33,null],[12,"ssi_code","","",33,null],[12,"ssi_pid","","",33,null],[12,"ssi_uid","","",33,null],[12,"ssi_fd","","",33,null],[12,"ssi_tid","","",33,null],[12,"ssi_band","","",33,null],[12,"ssi_overrun","","",33,null],[12,"ssi_trapno","","",33,null],[12,"ssi_status","","",33,null],[12,"ssi_int","","",33,null],[12,"ssi_ptr","","",33,null],[12,"ssi_utime","","",33,null],[12,"ssi_stime","","",33,null],[12,"ssi_addr","","",33,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",34,null],[12,"mq_maxmsg","","",34,null],[12,"mq_msgsize","","",34,null],[12,"mq_curmsgs","","",34,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",35,null],[12,"sa_mask","","",35,null],[12,"sa_flags","","",35,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",36,null],[12,"ss_flags","","",36,null],[12,"ss_size","","",36,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",37,null],[12,"si_errno","","",37,null],[12,"si_code","","",37,null],[12,"_pad","","",37,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ucred","","",null,null],[12,"pid","","",39,null],[12,"uid","","",39,null],[12,"gid","","",39,null],[3,"statfs","","",null,null],[12,"f_type","","",40,null],[12,"f_bsize","","",40,null],[12,"f_blocks","","",40,null],[12,"f_bfree","","",40,null],[12,"f_bavail","","",40,null],[12,"f_files","","",40,null],[12,"f_ffree","","",40,null],[12,"f_fsid","","",40,null],[12,"f_namelen","","",40,null],[12,"f_frsize","","",40,null],[3,"msghdr","","",null,null],[12,"msg_name","","",41,null],[12,"msg_namelen","","",41,null],[12,"msg_iov","","",41,null],[12,"msg_iovlen","","",41,null],[12,"msg_control","","",41,null],[12,"msg_controllen","","",41,null],[12,"msg_flags","","",41,null],[3,"termios","","",null,null],[12,"c_iflag","","",42,null],[12,"c_oflag","","",42,null],[12,"c_cflag","","",42,null],[12,"c_lflag","","",42,null],[12,"c_line","","",42,null],[12,"c_cc","","",42,null],[12,"c_ispeed","","",42,null],[12,"c_ospeed","","",42,null],[3,"flock","","",null,null],[12,"l_type","","",43,null],[12,"l_whence","","",43,null],[12,"l_start","","",43,null],[12,"l_len","","",43,null],[12,"l_pid","","",43,null],[3,"ipc_perm","","",null,null],[12,"__key","","",44,null],[12,"uid","","",44,null],[12,"gid","","",44,null],[12,"cuid","","",44,null],[12,"cgid","","",44,null],[12,"mode","","",44,null],[12,"__seq","","",44,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",45,null],[12,"shm_segsz","","",45,null],[12,"shm_atime","","",45,null],[12,"shm_dtime","","",45,null],[12,"shm_ctime","","",45,null],[12,"shm_cpid","","",45,null],[12,"shm_lpid","","",45,null],[12,"shm_nattch","","",45,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",46,null],[12,"st_ino","","",46,null],[12,"st_nlink","","",46,null],[12,"st_mode","","",46,null],[12,"st_uid","","",46,null],[12,"st_gid","","",46,null],[12,"st_rdev","","",46,null],[12,"st_size","","",46,null],[12,"st_blksize","","",46,null],[12,"st_blocks","","",46,null],[12,"st_atime","","",46,null],[12,"st_atime_nsec","","",46,null],[12,"st_mtime","","",46,null],[12,"st_mtime_nsec","","",46,null],[12,"st_ctime","","",46,null],[12,"st_ctime_nsec","","",46,null],[3,"stat64","","",null,null],[12,"st_dev","","",47,null],[12,"st_ino","","",47,null],[12,"st_nlink","","",47,null],[12,"st_mode","","",47,null],[12,"st_uid","","",47,null],[12,"st_gid","","",47,null],[12,"st_rdev","","",47,null],[12,"st_size","","",47,null],[12,"st_blksize","","",47,null],[12,"st_blocks","","",47,null],[12,"st_atime","","",47,null],[12,"st_atime_nsec","","",47,null],[12,"st_mtime","","",47,null],[12,"st_mtime_nsec","","",47,null],[12,"st_ctime","","",47,null],[12,"st_ctime_nsec","","",47,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",48,null],[12,"uc_link","","",48,null],[12,"uc_stack","","",48,null],[12,"uc_mcontext","","",48,null],[12,"uc_sigmask","","",48,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",49,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",49,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",49,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",49,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",49,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",49,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",49,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",49,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",49,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",49,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",49,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",49,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",49,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",49,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",49,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",49,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",49,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",49,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",49,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",49,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",50,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"eq","core::num::flt2dec::decoder","",51,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",52,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",53,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",53,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",53,null],[11,"clone","","",54,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",54,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",54,null],[11,"fmt","","",55,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",56,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",56,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",57,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",58,null],[11,"eq","","",59,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",60,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",60,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",61,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",62,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",62,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",62,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",62,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",62,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",62,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",62,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",62,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",62,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",62,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",62,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",62,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",62,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",62,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",62,null],[11,"eq","","",62,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",62,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",62,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",62,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",63,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",63,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",63,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",63,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",63,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",63,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",63,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",63,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",63,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",63,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",63,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",63,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",63,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",63,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",63,null],[11,"eq","","",63,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",63,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",63,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",63,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",64,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",64,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",64,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",64,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",65,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",66,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",66,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",67,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",68,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",68,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",68,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",69,null],[11,"get","","Dereferences the content.",69,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",69,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",70,null],[11,"clone","","",70,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",71,null],[11,"eq","","",71,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",71,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",71,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",71,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",72,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",72,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",73,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",74,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",75,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",76,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",76,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",76,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",77,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",77,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",77,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",77,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",77,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",77,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",77,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",78,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",79,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",80,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",81,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",82,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",83,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",79,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",79,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",79,null],[11,"swap","","Stores a value into the bool, returning the old value.",79,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",79,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",79,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",79,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",79,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",79,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",80,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",80,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",80,null],[11,"swap","","Stores a value into the isize, returning the old value.",80,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",80,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",80,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",80,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",80,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",80,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",80,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",81,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",81,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",81,null],[11,"swap","","Stores a value into the usize, returning the old value.",81,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",81,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",81,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",81,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",81,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",81,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",81,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",82,null],[11,"load","","Loads a value from the pointer.",82,null],[11,"store","","Stores a value into the pointer.",82,null],[11,"swap","","Stores a value into the pointer, returning the old value.",82,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",82,null],[11,"fmt","","",81,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",84,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",84,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",84,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",84,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",84,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",84,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",84,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",86,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",86,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",86,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",86,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",86,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",86,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",86,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",86,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",86,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",87,null],[11,"clone","","",87,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",88,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",88,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",88,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",88,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",89,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",89,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",90,null],[11,"deref","","",89,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",89,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",91,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",91,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",91,null],[11,"clone","core::char","",92,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",93,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",92,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"clone","","",94,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",95,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",94,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"count","","",94,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",94,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",94,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",96,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",96,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",97,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",98,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"clone","","",99,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",100,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",99,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",99,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",99,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",99,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",101,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",102,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",103,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",104,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",105,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"nth","","",105,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",105,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",105,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",106,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",106,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",106,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",106,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",106,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",106,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",107,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"clone","","",108,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",108,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"clone","","",109,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",109,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",109,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",109,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",109,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"clone","","",110,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",110,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",110,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"clone","","",111,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",111,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"clone","","",112,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",112,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"next_back","","",112,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",113,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",113,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",113,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",113,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",114,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",74,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",73,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",115,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"clone","","",116,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",116,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",115,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next","core::ops","",73,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",117,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",117,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",118,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next_back","","",118,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",118,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",118,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",118,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",119,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",119,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",119,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",49,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",49,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",120,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",120,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next_back","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next_back","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",123,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next_back","","",123,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",49,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",124,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",125,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",126,null],[11,"fmt","","",126,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",126,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",126,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",126,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",126,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",126,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",126,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",126,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",126,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",126,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",126,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",126,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",126,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",126,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",126,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",126,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",126,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",126,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",126,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",126,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",126,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",126,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",126,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",126,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",126,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",126,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",126,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",127,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",128,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next_back","","",128,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",129,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"next_back","","",129,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",126,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",130,null],[11,"next","","",130,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"count","","",130,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",130,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",130,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",130,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",131,null],[11,"next","","",131,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"count","","",131,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",131,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",131,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",132,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"next_back","","",132,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",132,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",133,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",133,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"next_back","","",133,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",134,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"next","","",135,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next","","",136,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next","","",137,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",137,null],[11,"next","","",138,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",138,null],[11,"clone","","",139,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",139,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",139,null],[11,"count","","",139,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",139,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",139,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",139,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",140,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",140,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",140,null],[11,"count","","",140,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",140,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",140,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",140,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",141,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"count","","",141,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",141,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",141,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",141,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",142,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",143,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",144,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",143,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",143,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",143,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",145,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",145,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",145,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",145,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",145,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",145,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",145,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",145,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",146,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",146,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",146,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",146,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",146,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",146,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",147,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",147,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",147,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",147,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",147,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",147,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",147,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",147,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",148,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",149,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",150,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",148,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",148,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",148,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",148,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",148,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",151,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",152,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",152,null],[11,"matching","","",152,null],[11,"use_early_reject","","",153,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",153,null],[11,"matching","","",153,null],[11,"eq","core::str","",154,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",154,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",155,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",155,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",155,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",156,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"next_back","","",156,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",156,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",157,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",157,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"next_back","","",157,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",157,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",158,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",158,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",158,null],[11,"count","","",158,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",158,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",158,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",158,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",158,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",159,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",160,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",161,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",160,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",161,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",162,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",162,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",163,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",162,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",163,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",165,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",166,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",166,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",167,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",168,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",168,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",169,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",169,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",168,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",169,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",170,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",171,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",171,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",172,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",172,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",171,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",172,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",173,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",173,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",173,null],[11,"next_back","","",173,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",174,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",175,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",175,null],[11,"call_mut","","",175,null],[11,"call_once","","",175,null],[11,"next","","",174,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",174,null],[11,"next_back","","",174,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",176,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",177,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",177,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",177,null],[11,"finish","","",177,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",177,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",177,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",178,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",178,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",178,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",179,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",179,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",180,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",181,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",182,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",182,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",183,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",184,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",184,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",185,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",186,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",187,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",187,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",188,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",188,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",188,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",189,null],[11,"entry","","Adds a new entry to the set output.",190,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",190,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",190,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",191,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",191,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",191,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",192,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",192,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",192,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",193,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",194,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",195,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",195,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",196,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",197,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",198,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",198,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",199,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",200,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",201,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",201,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",202,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",202,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",202,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",202,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",202,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",202,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",202,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",202,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",202,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",202,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",202,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",202,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",202,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",202,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",202,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",202,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",202,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",202,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",202,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",202,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",202,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",71,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",84,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",203,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",203,null],[11,"clone","libc","",46,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",47,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",204,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",205,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",48,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",206,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",35,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",36,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",37,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",38,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",39,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",40,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",41,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",42,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",43,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",44,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",45,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",24,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",25,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",26,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",27,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",28,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",207,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",208,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",209,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",210,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",29,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",30,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",31,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",32,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",33,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",211,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",34,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",212,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",12,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",17,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",18,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",213,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",19,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",20,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",21,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",22,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",23,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"sockaddr_nl"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['linear_map'] = {"items":[[3,"LinearMap","linear_map","A very simple map implementation backed by a vector.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a LinearMap.",null,null],[3,"VacantEntry","","A view into a single empty location in a LinearMap.",null,null],[3,"IntoIter","","A consuming iterator over a map.",null,null],[3,"Iter","","The iterator returned by `LinearMap::iter`.",null,null],[3,"IterMut","","The iterator returned by `LinearMap::iter_mut`.",null,null],[3,"Keys","","The iterator returned by `LinearMap::keys`.",null,null],[3,"Values","","The iterator returned by `LinearMap::values`.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[11,"clone","","",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"linearmap"}}],[11,"new","","Creates an empty map. This method does not allocate.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"linearmap"}}],[11,"with_capacity","","Creates an empty map with the given initial capacity.",1,{"inputs":[{"name":"linearmap"},{"name":"usize"}],"output":{"name":"linearmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more to be inserted in the\nmap. The collection may reserve more space to avoid frequent\nreallocations.",1,{"inputs":[{"name":"linearmap"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elemnnts to\nbe inserted in the map.",1,{"inputs":[{"name":"linearmap"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible.",1,{"inputs":[{"name":"linearmap"}],"output":null}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all elements. Keeps the allocated memory for\nreuse.",1,{"inputs":[{"name":"linearmap"}],"output":null}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. Iterator\nelement type is `(&'a K, &'a V)`.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order with\nmutable references to the values. Iterator element type is `(&'a K, &'a\nmut V)`.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"itermut"}}],[11,"keys","","An iterator visiting all keys in arbitrary order. Iterator element type\nis `&'a K`.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. Iterator element\ntype is `&'a V`.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"values"}}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"linearmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"linearmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value to the specified key.",1,{"inputs":[{"name":"linearmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, it is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"linearmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key-value pair from the map. If the key had a value present\nin the map, it is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"linearmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"linearmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"fmt","","",1,{"inputs":[{"name":"linearmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"linearmap"},{"name":"i"}],"output":null}],[11,"from_iter","","",1,{"inputs":[{"name":"linearmap"},{"name":"i"}],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"linearmap"},{"name":"h"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"linearmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"eq","","",1,{"inputs":[{"name":"linearmap"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"linearmap"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"linearmap"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",2,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",2,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",2,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",2,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",2,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",3,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"next","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",5,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",6,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next","","",7,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next","","",8,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",5,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",7,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",8,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next_back","","",5,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",6,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",7,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next_back","","",8,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"into_iter","","",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"intoiter"}}]],"paths":[[4,"Entry"],[3,"LinearMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"]]};
searchIndex['byteorder'] = {"items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"write_uint","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex['bitflags'] = {"items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex['lazy_static'] = {"items":[[14,"lazy_static!","lazy_static","",null,null]],"paths":[]};
initSearch(searchIndex);
